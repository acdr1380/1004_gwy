import { AfterViewInit, Component, OnInit } from '@angular/core';
import { ActivatedRoute, ParamMap, Router } from '@angular/router';
import { AssessStateEnum, AssessStateEnum_CN } from '../enums/AssessSateEnum';
import { ExamYearService } from '../exam-year.service';
import { Base64 } from 'js-base64';
import { WorkflowService } from 'app/workflow/workflow.service';
import { CommonService } from 'app/util/common.service';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { ColumnTypeEnum } from 'app/entity/enums/ColumnTypeEnum';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';

@Component({
    // tslint:disable-next-line:component-selector
    selector: 'y-table',
    templateUrl: './exam-year-table.component.html',
    styleUrls: ['./exam-year-table.component.scss'],
})
export class ExamYearTableComponent implements OnInit, AfterViewInit {
    userInfo: any;
    columnType = ColumnTypeEnum;

    AssessStateEnum = AssessStateEnum;
    AssessStateEnum_CN = AssessStateEnum_CN;

    state = <any>{
        DB: false,
        YTJ: false,
        YWC: false,
        YZF: false,
    };

    operInfo: any;
    /**顶部tabar */
    tabars = {
        index: 0,
        list: AssessStateEnum_CN,
        evtChange: event => {
            this.psnTable.pageIndex = 1;
            this.psnTable._initRows();
        },
    };

    /** 表格 */
    psnTable = {
        pageSize: 7,
        pageIndex: 1,
        fields: [],
        rows: [],
        total: 0,
        loading: false,
        init: () => {
            this.psnTable._initFields();
            this.psnTable._initRows();
        },
        _initRows: () => {
            this.psnTable.loading = true;
            this.service
                .examYearLoadPsn({
                    $PAGE_INDEX$: this.psnTable.pageIndex,
                    $PAGE_SIZE$: this.psnTable.pageSize,
                    ANNUAL_ASSESS_RELATION_ID: this.operInfo.ANNUAL_ASSESS_RELATION_ID,
                    A2502: this.tabars.list[this.tabars.index].value,
                })
                .subscribe(res => {
                    this.psnTable.loading = false;
                    if (this.psnTable.pageIndex === 1) {
                        this.psnTable.total = res.totalCount;
                    }
                    this.psnTable.rows = res.result;
                });
        },
        _initFields: () => {
            this.psnTable.fields = [
                {
                    itemId: 'A0101',
                    itemName: '姓名',
                    columnType: 'text',
                },
                {
                    itemId: 'A0151',
                    itemName: '人员类别',
                    columnType: 'text',
                },
                {
                    itemId: 'A0104',
                    itemName: '性别',
                    columnType: 'text',
                },
                {
                    itemId: 'A0301',
                    itemName: '主要岗位等级',
                    columnType: 'text',
                },
                {
                    itemId: 'A2501',
                    itemName: '考核时间',
                    columnType: 'text',
                },
                {
                    itemId: 'A2502',
                    itemName: '考核结果',
                    columnType: 'select',
                },
            ];
        },
        // 人员考核结果修改
        examine: (event, row) => {
            this.service
                .examYearUpdate({
                    ANNUAL_ASSESS_DATA_ID: row.ANNUAL_ASSESS_DATA_ID,
                    A2502: event,
                })
                .subscribe(res => {
                    this.psnTable._initRows();
                });
        },
        delete: row => {
            this.service
                .examYearDeletePsn({ ANNUAL_ASSESS_DATA_ID: row.ANNUAL_ASSESS_DATA_ID })
                .subscribe(res => {
                    const index = this.psnTable.rows.findIndex(
                        x => x.ANNUAL_ASSESS_DATA_ID === row.ANNUAL_ASSESS_DATA_ID
                    );
                    this.psnTable.rows.splice(index, 1);
                    this.psnTable.rows = [...this.psnTable.rows];
                    this.psnTable.refreshStatus();
                });
        },
        evtIndexChange: () => {
            this.psnTable._initRows();
        },

        /** 已选择人员 */
        selectPsnTags: [],
        isAllCheck: false,
        isIndeterminate: false,
        /** 选中全部 */
        checkAll: event => {
            this.psnTable.rows.forEach(x => (x.check = event));
            this.psnTable.refreshStatus();
        },
        /** 选中行 刷新选中状态 */
        refreshStatus: () => {
            // 是否选择全部
            this.psnTable.isAllCheck = this.psnTable.rows.every(x => x.check);
            // 是否选择了一部分人员
            this.psnTable.isIndeterminate =
                this.psnTable.rows.some(x => x.check) && !this.psnTable.isAllCheck;
            // 获取选择人员
            this.psnTable.selectPsnTags = this.psnTable.rows.filter(x => x.check);
        },
    };

    serchKey = new Subject<string>();
    /** 添加人员抽屉 */
    addPsnDra = {
        visible: false,
        title: '添加考核人员',
        width: 800,
        open: () => {
            this.addPsnDra.visible = true;
            this.addPsnDra.table.initRow();
        },
        close: () => {
            this.addPsnDra.visible = false;
        },
        find: {
            key: new Subject<string>(),
            list: [],
            evtOpenChange: status => {
                if (status) {
                    this.addPsnDra.find.key = null;
                }
            },
            // 文本框值改变回调
            evtOnSearch: (value: string) => {
                if (value.trim()) {
                    this.serchKey.next(value.trim());
                }
            },
            // 选中的optiong改变回调
            evtChange: value => {
                if (value === null) {
                    return;
                }
                const data = {
                    DATA_1002_PERSON_A01_ID: value,
                    $TREE_INCLUDE_LOWER_LEVEL$: false,
                    A0103: '01',
                    ORG_B01_ID: this.userInfo.sessionUser.unitId,
                    ORG_TYPE: this.userInfo.sessionUser.ORG_TYPE,
                    VIEW_FIELD_TYPE: 4,
                };
                this.service.queryPersonRowNumber(data).subscribe(num => {
                    const table = this.addPsnDra.table;
                    table.pageIndex =
                        // tslint:disable-next-line:radix
                        parseInt(num / table.pageSize + '') + 1;
                    table.selectedRowIndex = num % table.pageSize;
                    table.evtIndexChange();
                });
            },
        },
        table: {
            pageSize: 10,
            pageIndex: 1,
            rows: [],
            total: 0,
            selectedRowIndex: 0,
            evtIndexChange: () => {
                this.addPsnDra.table.initRow();
            },
            initRow: () => {
                const data = {
                    $PAGE_INDEX$: this.addPsnDra.table.pageIndex,
                    $PAGE_SIZE$: this.addPsnDra.table.pageSize,
                    $QUERY_FIELDS$: 'A0101,A0184,A0107,A0104',
                    A0103: '01',
                    // DATA_UNIT_ORG_ID: this.userInfo.sessionUser.orgin.DATA_UNIT_ORG_ID,
                    ORG_B01_ID: this.userInfo.sessionUser.unitId,
                    // ORG_TYPE: this.userInfo.sessionUser.orgin.ORG_TYPE,
                };
                this.workflowService.selectPsnTblData(data).subscribe(result => {
                    if (this.addPsnDra.table.pageIndex === 1) {
                        this.addPsnDra.table.total = result.totalCount;
                    }
                    this.addPsnDra.table.rows = result.result;
                });
            },
            evtSelectorRow: index => {
                this.addPsnDra.table.selectedRowIndex = index;
            },
        },
        /** 考核结果 */
        assessResult: '1',
        /** 已选择人员 */
        selectPsnTags: [],

        isAllCheck: false,
        isIndeterminate: false,
        /** 选中全部 */
        checkAll: event => {
            this.addPsnDra.table.rows.forEach(x => (x.check = event));
            this.addPsnDra.refreshStatus();
        },
        /** 选中行 刷新选中状态 */
        refreshStatus: () => {
            // 是否选择全部
            this.addPsnDra.isAllCheck = this.addPsnDra.table.rows.every(x => x.check);
            // 是否选择了一部分人员
            this.addPsnDra.isIndeterminate =
                this.addPsnDra.table.rows.some(x => x.check) && !this.addPsnDra.isAllCheck;
            // 获取选择人员
            this.addPsnDra.selectPsnTags = this.addPsnDra.table.rows.filter(x => x.check);
        },
        /** 删除tag */
        removeTag: event => {
            // 取消人员表格选中状态
            this.addPsnDra.table.rows.forEach(x => {
                if (x.keyId === event.keyId) {
                    x.check = false;
                }
            });
            this.addPsnDra.refreshStatus();
            // 删除数组中的数据
            // const _index = this.addPsnDra.selectPsnTags.findIndex(x => x.keyId === event.keyId);
            // this.addPsnDra.selectPsnTags.splice(_index, 1);
            // this.addPsnDra.selectPsnTags = [...this.addPsnDra.selectPsnTags];
        },
        // 确定导人
        evtImportPsn: () => {
            const data = {
                ANNUAL_ASSESS_RELATION_ID: this.operInfo.ANNUAL_ASSESS_RELATION_ID,
                PERSON_ID: this.addPsnDra.selectPsnTags
                    .map(x => x.DATA_1002_PERSON_A01_ID)
                    .join(','),
            };
            this.service.examYearImportPsn(data).subscribe(res => {
                this.psnTable._initRows();
                this.addPsnDra.close();
            });
        },
    };

    /** 批量修改时间 */
    batchTimeIfy = {
        visible: false,
        title: '批量修改考核时间',
        width: 300,
        open: () => {
            this.batchTimeIfy.visible = true;
        },
        close: () => {
            this.batchTimeIfy.form.reset();
            this.batchTimeIfy.visible = false;
        },
        form: new FormGroup({
            A2501: new FormControl(null, Validators.required),
        }),
        evtSave: () => {
            let data = this.batchTimeIfy.form.getRawValue();
            if (!this.workflowService.formVerify(this.batchTimeIfy.form)) {
                return false;
            }
            data = {
                ...data,
                ...{
                    UP_FIELD: 'A2501',
                    ANNUAL_ASSESS_RELATION_ID: this.operInfo.ANNUAL_ASSESS_RELATION_ID,
                },
            };
            this.service.examYearBatchField(data).subscribe(res => {
                // 刷新表格
                this.psnTable._initRows();
                this.batchTimeIfy.close();
            });
        },
    };

    /** 批量修改考核结果 */
    batchResIfy = {
        visible: false,
        title: '批量修改考核结果',
        width: 300,
        open: () => {
            this.batchResIfy.visible = true;
        },
        close: () => {
            this.batchResIfy.form.reset();
            this.batchResIfy.visible = false;
        },
        form: new FormGroup({
            A2502: new FormControl(null, Validators.required),
        }),
        evtSave: () => {
            let data = this.batchResIfy.form.getRawValue();
            if (!this.workflowService.formVerify(this.batchResIfy.form)) {
                return false;
            }
            data = {
                ...data,
                ...{
                    UP_FIELD: 'A2502',
                    ANNUAL_ASSESS_RELATION_ID: this.operInfo.ANNUAL_ASSESS_RELATION_ID,
                },
            };
            this.service.examYearBatchField(data).subscribe(res => {
                // 刷新表格
                this.psnTable._initRows();
                this.batchResIfy.close();
            });
        },
    };

    /** 人员信息编辑 */
    personEditIfy = {
        visible: false,
        title: '信息编辑',
        width: 300,
        selectPsn: null,
        open: item => {
            this.personEditIfy.form.reset(item);
            this.personEditIfy.selectPsn = item;
            this.personEditIfy.visible = true;
        },
        close: () => {
            this.personEditIfy.visible = false;
        },

        fields: [],
        form: new FormGroup({}),
        initform: () => {
            const form = new FormGroup({});
            this.personEditIfy.fields.forEach(v => {
                form.addControl(
                    v.TABLE_COLUMN_CODE,
                    new FormControl(
                        { value: null, disabled: false },
                        [
                            v.SCHEME_EDIT_IS_MUST_INPUT ? Validators.required : null,
                            v.SCHEME_EDIT_CHECK_SCRIPT
                                ? this.commonService.buildValidatorsFn(
                                      v,
                                      v.SCHEME_EDIT_CHECK_SCRIPT,
                                      this.personEditIfy.fields
                                  )
                                : null,
                        ].filter(s => s)
                    )
                );
            });
            this.personEditIfy.form = form;
        },

        evtSave: () => {
            const form = this.personEditIfy.form.getRawValue();
            this.service
                .examYearUpdate({
                    ANNUAL_ASSESS_DATA_ID: this.personEditIfy.selectPsn.ANNUAL_ASSESS_DATA_ID,
                    ...form,
                })
                .subscribe(res => {
                    this.personEditIfy.close();
                    this.psnTable._initRows();
                });
        },
    };

    constructor(
        private service: ExamYearService,
        private activatedRoute: ActivatedRoute,
        private workflowService: WorkflowService,
        private commonService: CommonService,
        private router: Router
    ) {}

    ngOnInit() {
        this.userInfo = this.commonService.getUserLoginInfo();
        this.loadRouterParams();
        this.loadEditfield();
        this.serchKey
            .pipe(
                // wait 300ms after each keystroke before considering the term
                debounceTime(100),
                // ignore new term if same as previous term
                distinctUntilChanged()
            )
            .subscribe(keyword => {
                const data = {
                    A0101: keyword.trim(),
                    $TREE_INCLUDE_LOWER_LEVEL$: false,
                    A0103: '01',
                    ORG_B01_ID: this.userInfo.sessionUser.unitId,
                    ORG_TYPE: this.userInfo.sessionUser.ORG_TYPE,
                    VIEW_FIELD_TYPE: 4,
                };
                this.service.queryPersonList(data).subscribe(result => {
                    this.addPsnDra.find.list = result;
                });
            });
    }

    ngAfterViewInit() {
        this.psnTable.init();
    }

    private loadRouterParams() {
        // 获取路由参数
        this.activatedRoute.paramMap.subscribe(async (params: ParamMap) => {
            // 判断路由参数是否存在
            if (params.has('GL')) {
                this.operInfo = JSON.parse(Base64.decode(params.get('GL')));
            }
            if (params.has('state')) {
                this.state = JSON.parse(Base64.decode(params.get('state')));
                console.log(this.state);
            }
        });
    }

    /**获取界面方案信息 */
    loadEditfield() {
        this.commonService.getSchemeContent('examYaerEdit').subscribe(res => {
            res.systemSchemeList.forEach(x => {
                x.systemSchemeEdit.forEach(m => {
                    this.personEditIfy.fields.push(m);
                });
            });
            this.personEditIfy.initform();
        });
    }
}
