import { Component, OnInit, TemplateRef, ViewChild, Output, EventEmitter } from '@angular/core';

import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { SelectUnitLevelService } from './select-unit-level.service';
import { NzTreeComponent, NzTreeNode, NzFormatEmitEvent } from 'ng-zorro-antd/tree';
import { NzContextMenuService, NzDropdownMenuComponent } from 'ng-zorro-antd/dropdown';
import { NzMessageService } from 'ng-zorro-antd/message';
import { CommonService } from 'app/util/common.service';

@Component({
    // tslint:disable-next-line:component-selector
    selector: 'select-unit-level',
    templateUrl: './select-unit-level.component.html',
    styleUrls: ['./select-unit-level.component.scss'],
})
export class SelectUnitLevelComponent implements OnInit {
    @Output() selectUnitChange = new EventEmitter<any>();

    @ViewChild('unitSelectedIfyTree', { static: true }) unitSelectedIfyTree: NzTreeComponent;
    @ViewChild('scrollViewport', { static: false }) scrollViewport: CdkVirtualScrollViewport;

    /**
     * 机构权限抽屉
     */
    unitSelectedIfy = {
        // 抽屉内容
        width: 540,
        visible: false,
        title: '单位列表',
        close: () => (this.unitSelectedIfy.visible = false),
        open: () => (this.unitSelectedIfy.visible = true),

        /**
         * 分组
         */
        group: {
            list: [],
            // value: environment.config.AppSettings.DATA_UNIT_ORG_GROUP_ID,
            value: null,
            /**
             * 加载机构分组
             */
            _load: () => {
                this.service.getOrgGroupList().subscribe(result => {
                    this.unitSelectedIfy.group.list = result;
                    const [first] = result;
                    this.unitSelectedIfy.group.value = first.value;
                    this.unitSelectedIfy.tree._load();
                });
            },
        },

        find: {
            width: 220,
            placeholder: '请输入关键字搜索',
            value: null,
            nzFilterOption: () => true,
            searchKey: null,
            searchList: [],
            parentList: [],
            moduleChange: value => {
                this.service.getOrgParentAllList(value).subscribe(result => {
                    this.unitSelectedIfy.find.parentList = result;
                    const nodes = this.unitSelectedIfyTree.getTreeNodes();
                    this.unitSelectedIfy.find.location(nodes);
                });
            },
            onSearch: key => {
                if (key) {
                    this.service
                        .selectListByQuery(this.unitSelectedIfy.group.value, key.trim())
                        .subscribe(result => {
                            this.unitSelectedIfy.find.searchList = result;
                        });
                }
            },
            location: nodes => {
                nodes.forEach(async node => {
                    if (node.key === this.unitSelectedIfy.find.value) {
                        this.unitSelectedIfy.tree.nzSelectedKeys = [node.key];
                        this.unitSelectedIfy.tree.activedNode = node;
                        this.unitSelectedIfy.find._nodePosition();
                    } else {
                        const _parent = this.unitSelectedIfy.find.parentList.find(
                            v => node.key === v.DATA_UNIT_ORG_ID
                        );
                        if (_parent) {
                            if (node && node.getChildren().length === 0) {
                                const childNodes = await this.unitSelectedIfy.tree._loadSync(node);
                                node.addChildren(childNodes);
                            }
                            this.unitSelectedIfy.tree.nzExpandedKeys = [
                                ...this.unitSelectedIfy.tree.nzExpandedKeys,
                                node.key,
                            ];
                            this.unitSelectedIfy.find.location(node.children);
                        }
                    }
                });
            },
            /**
             * 定位选中节点
             */
            _nodePosition: () => {
                setTimeout(() => {
                    const node: any = this.unitSelectedIfy.tree.activedNode;
                    const el = <HTMLElement>node.component.dragElement.nativeElement;
                    this.scrollViewport.scrollToOffset(el.offsetTop - 30);
                }, 300);
            },
        },

        /**
         * 机构树
         */
        tree: {
            nodes: [],
            icons: ['sitemap', 'server', 'building-o'],
            activedNode: <NzTreeNode>{},
            nzSelectedKeys: [],
            nzExpandedKeys: [],
            nzCheckBoxChange: (data: NzFormatEmitEvent) => {
                const { origin } = data.node;
                if (!origin.isChecked) {
                    origin.includeChild = origin.isChecked;
                    this.unitSelectedIfy.tree._setParentNodesIsincludeChild(data.node);
                }
            },
            evtActiveNode: (data: NzFormatEmitEvent) => {
                this.unitSelectedIfy.tree.activedNode = data.node;
            },
            evtExpandChange: (event: Required<NzFormatEmitEvent>) => {
                if (event.eventName === 'expand') {
                    const node = event.node;
                    if (node && node.getChildren().length === 0 && node.isExpanded) {
                        this.service
                            .getOrgUnitTree(this.unitSelectedIfy.group.value, node.key)
                            .subscribe(nodes => {
                                const check = node.origin.includeChild;
                                node.addChildren(
                                    nodes.map(n => {
                                        n.checked = check;
                                        n.includeChild = check;
                                        return n;
                                    })
                                );
                            });
                    }
                }
            },
            /**
             * 加载机构树
             */
            _load: () => {
                this.service.getOrgUnitTree(this.unitSelectedIfy.group.value).subscribe(nodes => {
                    this.unitSelectedIfy.tree.nodes = nodes;
                });
            },
            /**
             * 加载节点信息（Promise）
             */
            _loadSync: node => {
                return this.service
                    .getOrgUnitTree(this.unitSelectedIfy.group.value, node.key)
                    .toPromise();
            },

            contextMenu: ($event: MouseEvent, menu: NzDropdownMenuComponent, node: NzTreeNode) => {
                this.unitSelectedIfy.tree.activedNode = node;
                this.nzDropdownService.create($event, menu);
            },
            /**
             * 选中（取消）包含下层
             */
            evtChecklevel: (status: boolean = false) => {
                const { origin } = this.unitSelectedIfy.tree.activedNode;
                this.unitSelectedIfy.tree.activedNode.isChecked = status;
                origin.includeChild = status;
                if (!this.unitSelectedIfy.tree.activedNode.key) {
                    this.message.warning('未选中上层机构!');
                    return;
                }
                this.unitSelectedIfy.tree.activedNode.isChecked = status;
                this.unitSelectedIfy.tree._setExpandCheckChildNodes(
                    this.unitSelectedIfy.tree.activedNode,
                    status
                );
                if (!status) {
                    this.unitSelectedIfy.tree._setParentNodesIsincludeChild(
                        this.unitSelectedIfy.tree.activedNode
                    );
                }
            },
            /**
             * 设置所有已知子节点的选中状态
             */
            _setExpandCheckChildNodes: (node: NzTreeNode, status: boolean = false) => {
                node.children.forEach(v => {
                    v.setChecked(status);
                    v.origin.includeChild = status;
                    if (v.getChildren().length > 0) {
                        this.unitSelectedIfy.tree._setExpandCheckChildNodes(v, status);
                    }
                });
            },
            /**
             * 设置父节点的选中下层属性
             */
            _setParentNodesIsincludeChild: (node: NzTreeNode) => {
                if (node.origin.includeChild) {
                    node.origin.includeChild = false;
                }
                if (node.parentNode) {
                    this.unitSelectedIfy.tree._setParentNodesIsincludeChild(node.parentNode);
                }
            },
        },
    };

    constructor(
        private service: SelectUnitLevelService,
        private message: NzMessageService,
        private nzDropdownService: NzContextMenuService,
        private commonService: CommonService
    ) {}

    ngOnInit() {
        this.commonService.getAppSettings().then(appSettings => {
            this.unitSelectedIfy.group.value = appSettings.DATA_UNIT_ORG_GROUP_ID;
            this.unitSelectedIfy.group._load();
        });
    }

    /**
     * 显示选择单位抽屉
     */
    open() {
        this.unitSelectedIfy.open();
    }

    /**
     * 关闭选择单位
     */
    close() {
        this.unitSelectedIfy.close();
    }

    /**
     * 获得选中单位
     */
    getSelectUnit() {
        const nodes = this.unitSelectedIfyTree.getCheckedNodeList();
        const nodeLists = this.getTreeDateCheckedLevelList(nodes);
        return nodeLists;
    }

    /**
     * 设置选中状态
     * @param list ORG_ID 数组
     * @param status false 等于清空选中
     */
    setCheckincludeChild(list, status = false) {
        if (list) {
            list.forEach(v => {
                const node = this.unitSelectedIfyTree.getTreeNodeByKey(v);
                if (node) {
                    node.origin.includeChild = status;
                    node.setChecked(status);
                    this.unitSelectedIfy.tree._setExpandCheckChildNodes(node, status);
                }
            });
        }
    }

    /**
     * 获得选中下层节点
     *
     * @param {NzTreeNode[]} data 选中节点
     * @returns {NzTreeNode[]} 去重节点
     * @memberof SettingService
     */
    private getTreeDateCheckedLevelList(data: NzTreeNode[]): NzTreeNode[] {
        return data.filter(node => {
            // 未选中下层节点
            if (!node.origin.includeChild) {
                return true;
            }
            // 无父节点
            if (!node.parentNode) {
                return true;
            }
            // 所有父节点未包含下层
            return !this.getParentNodesIsincludeChild(node.parentNode);
        });
    }

    /**
     * 获得所有父节点是否存在包含下层
     *
     * @param {NzTreeNode} node 节点
     * @returns {boolean} 是否有包含下层父节点存在
     * @memberof SettingComponent
     */
    private getParentNodesIsincludeChild(node: NzTreeNode): boolean {
        if (node.origin.includeChild) {
            return true;
        } else {
            if (node.parentNode) {
                return this.getParentNodesIsincludeChild(node.parentNode);
            }
        }
    }

    /**
     * 确认选择
     */
    evtAffirm() {
        const nodeList = this.getSelectUnit();
        this.selectUnitChange.emit(nodeList);
        this.unitSelectedIfy.close();
    }
}
