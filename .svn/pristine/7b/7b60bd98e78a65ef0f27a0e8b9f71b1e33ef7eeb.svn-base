import { DictionaryInputMultipleService } from './dictionary-input-multiple.service';
import {
    Component,
    OnInit,
    Input,
    Output,
    EventEmitter,
    ViewChild,
    ElementRef,
    AfterViewInit,
    TemplateRef,
} from '@angular/core';

import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { NzTreeComponent, NzTreeNode, NzFormatEmitEvent } from 'ng-zorro-antd/tree';
import { NzContextMenuService, NzDropdownMenuComponent } from 'ng-zorro-antd/dropdown';

@Component({
    // tslint:disable-next-line:component-selector
    selector: 'dictionary-input-multiple',
    templateUrl: './dictionary-input-multiple.component.html',
    styleUrls: ['./dictionary-input-multiple.component.scss'],
})
export class DictionaryInputMultipleComponent implements OnInit, AfterViewInit {
    @Input() code: string;

    _text: string;
    @Input() set text(v) {
        this._text = v;
        if (v !== null || v !== undefined) {
            this.textChange.emit(this._text);
        }
    }
    get text() {
        return this._text;
    }
    @Input() disabled = false;
    @Input() placeholder = '';
    // 过滤方式
    @Input() filterWay = false; // true: 显示， false: 不显示
    // 过滤项
    @Input() filterItems: string[] = [];

    @Input() parent = '-1'; // 自定义父节点

    @Output() visibleChange = new EventEmitter<any>();
    @Output() textChange = new EventEmitter<any>();

    private dictionaryInfo: any = {}; // 字典信息

    @ViewChild('inputMultipleElement', { static: false }) private inputMultipleElement: ElementRef;

    @ViewChild('scrollViewport', { static: false })
    private scrollViewport: CdkVirtualScrollViewport;
    @ViewChild('dictionaryTreeElement', { static: false })
    private dictionaryTreeElement: NzTreeComponent;

    // 字典树抽屉
    dictionaryDrawerIfy = {
        width: 380,
        visible: false,
        title: '选择内容',
        close: () => {
            this.dictionaryDrawerIfy.visible = false;
            this.visibleChange.emit(false);
        },
        open: () => {
            this.inputMultipleElement.nativeElement.blur();
            this.dictionaryDrawerIfy.visible = true;
            this.visibleChange.emit(true);
        },

        find: {
            list: [],
            parentList: [],
            keyword: null,
            evtOpenChange: status => {
                if (status) {
                    this.dictionaryDrawerIfy.find.keyword = null;
                }
            },
            evtOnSearch: (keyword: string) => {
                if (keyword) {
                    this.service
                        .searchKeyword(this.code, keyword.trim(), this.filterItems, this.filterWay)
                        .subscribe(result => (this.dictionaryDrawerIfy.find.list = result));
                }
            },
            evtChange: value => {
                if (!value) {
                    return;
                }
                this.service.getParentAllList(this.code, value).subscribe(result => {
                    this.dictionaryDrawerIfy.find.parentList = result;
                    const nodes = this.dictionaryTreeElement.getTreeNodes();
                    this.dictionaryDrawerIfy.tree._selectedLocationOrg(nodes, value);
                });
            },
        },
        tree: {
            nodes: [],
            activedNode: <NzTreeNode>null,
            evtActiveNode: (data: NzFormatEmitEvent) => {
                this.dictionaryDrawerIfy.tree.activedNode = data.node;
                this.dictionaryDrawerIfy.dropdownClose();
                // this.dictionaryItemSelected();
            },
            evtExpandChange: (event: Required<NzFormatEmitEvent>) => {
                if (event.eventName === 'expand') {
                    const node = event.node;

                    if (node && node.getChildren().length === 0 && node.isExpanded) {
                        this.service
                            .getSysDicItemList(
                                this.code,
                                node.key,
                                this.filterItems,
                                this.filterWay
                            )
                            .subscribe(nodes =>
                                node.addChildren(
                                    nodes.map(_node => this.setNodeCheckStatus(node, _node))
                                )
                            );
                    }
                }
            },
            /**
             * 定位
             */
            _selectedLocationOrg: (nodes: NzTreeNode[], value: string) => {
                nodes.forEach(async node => {
                    if (value === node.origin.value) {
                        this.dictionaryDrawerIfy.tree.activedNode = node;
                        this.dictionaryDrawerIfy.tree._locationedScroll();
                    } else {
                        const isExist =
                            this.dictionaryDrawerIfy.find.parentList.findIndex(
                                v => v.key === node.origin.key
                            ) > -1;
                        if (isExist) {
                            node.isExpanded = true;
                            // 有子节点并且未取出来
                            if (!node.isLeaf && node.getChildren().length === 0) {
                                const childNodes = await this.dictionaryDrawerIfy.tree._asyncLoadNodeChildNode(
                                    node
                                );
                                node.addChildren(
                                    childNodes.map(_node => this.setNodeCheckStatus(node, _node))
                                );
                            }
                            if (node.getChildren().length > 0) {
                                this.dictionaryDrawerIfy.tree._selectedLocationOrg(
                                    node.children,
                                    value
                                );
                            }
                        }
                    }
                });
            },
            /*
             * 查询子节点
             */
            _asyncLoadNodeChildNode: (node: NzTreeNode): Promise<any> => {
                return this.service
                    .getSysDicItemList(this.code, node.key, this.filterItems, this.filterWay)
                    .toPromise();
            },
            /*
             * 滚动到定位节点位置
             */
            _locationedScroll: () => {
                setTimeout(() => {
                    const node: any = this.dictionaryDrawerIfy.tree.activedNode;
                    const el = <HTMLElement>node.component.dragElement.nativeElement;
                    this.scrollViewport.scrollToOffset(el.offsetTop - 30);
                }, 300);
            },
        },

        /**
         * 选种（取消）下层
         */
        evtCheckChange: (status = false) => {
            const node = this.dictionaryDrawerIfy.tree.activedNode;
            const origin = node.origin;
            if (origin) {
                node.setChecked(status);
                origin.includeChild = status;
                this.setExpandCheckChildNodes(node, status);
                if (!status) {
                    this.setParentNodesIsincludeChild(node);
                }
            }
            this.dictionaryDrawerIfy.dropdownClose();
        },
        nzCheckBoxChange: (data: NzFormatEmitEvent) => {
            const { origin } = data.node;
            if (!origin.isChecked) {
                this.setParentNodesIsincludeChild(data.node);
            }
            this.dictionaryDrawerIfy.dropdownClose();
        },
        dropdown: null,
        contextMenu: ($event: MouseEvent, template: NzDropdownMenuComponent, node: NzTreeNode) => {
            this.dictionaryDrawerIfy.tree.activedNode = node;
            this.dictionaryDrawerIfy.dropdown = this.dropdownService.create($event, template);
        },
        dropdownClose: () => {
            if (this.dictionaryDrawerIfy.dropdown) {
                this.dictionaryDrawerIfy.dropdown.close();
            }
        },

        evtConfirm: () => {
            const nodes = this.dictionaryTreeElement.getCheckedNodeList();
            // 过滤选中下层单位
            const dataList = nodes.filter(node => {
                // 未选中下层节点
                if (!node.origin.includeChild) {
                    return true;
                }
                // 无父节点
                if (!node.parentNode) {
                    return true;
                }
                // 所有父节点未包含下层
                return !this.getParentNodesIsincludeChild(node.parentNode);
            });

            const data = dataList.map(v => {
                return {
                    name: v.title,
                    value: v.origin.value,
                    includeChild: !!v.origin.includeChild,
                };
            });

            if (data.length > 0) {
                const text = `${data[0].name}${data[0].includeChild ? '(及下层)' : ''}...`;
                this.text = text;
                this.value = data;
                this.onChange(this.value);
                this.dictionaryDrawerIfy.close();
            }
        },
        evtEmpty: () => {
            this.text = null;
            this.value = null;
            this.onChange(this.value);
            this.dictionaryDrawerIfy.close();
        },
        evtReset: () => {},
    };

    // 定义ControlValueAccessor提供的事件回调
    value: any;
    onChange: (value: string | string[]) => void = () => null;
    onTouched: () => void = () => null;

    constructor(
        private service: DictionaryInputMultipleService,
        private dropdownService: NzContextMenuService
    ) {}

    ngOnInit() {}

    ngAfterViewInit(): void {}

    writeValue(obj: any): void {
        this.value = obj;
        // if (!obj) {
        //     this.text = null;
        // }
    }

    registerOnChange(fn: any): void {
        this.onChange = fn;
    }

    registerOnTouched(fn: any): void {
        this.onTouched = fn;
    }

    setDisabledState?(isDisabled: boolean): void {
        this.disabled = isDisabled;
    }

    /**
     * 输入框点击事件
     */
    evtClick() {
        this.loadDictionaryInfo();
        // this.loadOftenUserList();
        this.dictionaryDrawerIfy.open();
    }

    /**
     * 加载字典信息
     */
    loadDictionaryInfo() {
        if (this.dictionaryInfo.DICTIONARY_NAME || ['N'].indexOf(this.code) > -1) {
            return;
        }
        this.service.getDictionaryInfo(this.code).subscribe(result => {
            this.dictionaryInfo = result;
            this.dictionaryDrawerIfy.title = result.DICTIONARY_NAME;
            this.loadDictionaryList();
        });
    }

    /**
     * 加载字典列表
     */
    loadDictionaryList() {
        if (this.dictionaryDrawerIfy.tree.nodes.length > 0) {
            this.dictionaryDrawerIfy.find.evtChange(this.value);
            return;
        }
        this.service
            .getSysDicItemList(this.code, this.parent, this.filterItems, this.filterWay)
            .subscribe(result => {
                this.dictionaryDrawerIfy.tree.nodes = result;
                this.dictionaryDrawerIfy.find.evtChange(this.value);
            });
    }

    /**
     * 设置所有已知子节点的选中状态
     *
     * @private
     * @param {NzTreeNode} node 节点
     * @param {boolean} status 选中状态
     * @memberof SettingComponent
     */
    private setExpandCheckChildNodes(node: NzTreeNode, status: boolean = false): void {
        node.children.forEach(v => {
            // tslint:disable-next-line: deprecation
            v.setChecked(status);
            v.origin.includeChild = status;
            if (v.getChildren().length > 0) {
                this.setExpandCheckChildNodes(v, status);
            }
        });
    }
    /**
     * 设置父节点的选中下层属性
     *
     * @private
     * @param {NzTreeNode} node 节点
     * @memberof SettingComponent
     */
    private setParentNodesIsincludeChild(node: NzTreeNode): void {
        if (node.origin.includeChild) {
            node.origin.includeChild = false;
        }
        if (node.parentNode) {
            this.setParentNodesIsincludeChild(node.parentNode);
        }
    }

    /**
     * 设置节点选中状态
     *
     * @private
     * @param {*} node 节点
     * @returns
     * @memberof EditComponent
     */
    private setNodeCheckStatus<T>(parentNode: NzTreeNode, node: any): T {
        const item = [].find(v => v === node.key);
        if (item) {
            node.checked = true;
            node.includeChild = item;
        } else {
            const _check = parentNode.origin.includeChild;
            node.checked = _check;
            node.includeChild = _check;
        }
        return node;
    }

    /**
     * 获得所有父节点是否存在包含下层
     *
     * @private
     * @param {NzTreeNode} node 节点
     * @returns {boolean} 是否有包含下层父节点存在
     * @memberof SettingComponent
     */
    private getParentNodesIsincludeChild(node: NzTreeNode): boolean {
        if (node.origin.includeChild) {
            return true;
        } else {
            if (node.parentNode) {
                return this.getParentNodesIsincludeChild(node.parentNode);
            }
        }
    }
}
