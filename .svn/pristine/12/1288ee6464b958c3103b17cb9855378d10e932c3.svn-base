import { Component, OnDestroy, OnInit } from '@angular/core';
import { PelationStataEnum_CN } from '../enums/PelationStateEnum';
import { Base64 } from 'js-base64';
import { ActivatedRoute, Router } from '@angular/router';
import { CommonService } from 'app/util/common.service';
import { ExamYearService } from '../exam-year.service';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { ClientService } from 'app/master-page/client/client.service';

@Component({
    selector: 'app-exam-year',
    templateUrl: './exam-year-workflow.component.html',
    styleUrls: ['./exam-year-workflow.component.scss'],
})
export class ExamYearWorkflowComponent implements OnInit, OnDestroy {
    /**
     * 用户信息
     */
    userInfo: any = {};

    PelationEnums = PelationStataEnum_CN;

    /**
     * 年度考核批次相关
     */
    operDeployIfy = {
        year: null,
        yearList: [],
        _loadYearList: () => {
            this.service.examYearSelectAllYear().subscribe(res => {
                const [first] = res;
                this.operDeployIfy.year = first;
                this.operDeployIfy.yearList = res;
                this.operDeployIfy.table.initRows();
                this.operTableIfy.evtPageChange();
            });
        },
        evtYearChange: () => {
            this.operDeployIfy.table.initRows();
            this.operTableIfy.evtPageChange();
        },
        table: {
            pageSize: 5,
            pageIndex: 1,
            total: 0,
            rows: [],
            initRows: () => {
                const data = {
                    ASSESS_YEAR: this.operDeployIfy.year,
                };
                this.service.examYearSelectByYear(data).subscribe(res => {
                    if (this.operDeployIfy.table.total === 0) {
                        this.operDeployIfy.table.total = res.totalCount;
                    }
                    this.operDeployIfy.table.rows = res.result;
                });
            },
        },
        evtEdit: row => {
            const GL = Base64.encode(JSON.stringify(row));
            this.router.navigate(['leader', { GL }], { relativeTo: this.activatedRoute });
        },
    };

    /**
     * 业务列表
     */
    operTableIfy = {
        loading: false,
        data: [],
        pageIndex: 1,
        pageSize: 5,
        totalCount: 0,
        selectedRowIndex: 0,
        /**
         * 加载业务列表
         */
        evtPageChange: (reset: boolean = false) => {
            if (reset) {
                this.operTableIfy.pageIndex = 1;
            }
            const data = {
                $PAGE_INDEX$: this.operTableIfy.pageIndex,
                $PAGE_SIZE$: this.operTableIfy.pageSize,
                ASSESS_YEAR: this.operDeployIfy.year,
                RELATION_ORG_GROUP_ID: this.userInfo.sessionUser.authOrgGroup[0],
                RELATION_B01_ID: this.userInfo.sessionUser.unitId,
                RELATION_STATE: this.jobStateTabsIfy.list[this.jobStateTabsIfy.selectIndex].value,
            };
            /**查询业务列表 */
            this.service.examYearSelectWflist(data).subscribe(res => {
                if (reset) {
                    this.operTableIfy.totalCount = res.totalCount;
                }
                this.operTableIfy.data = res.result;
            });
        },
        evtRedirectRoute: row => {
            const GL = Base64.encode(JSON.stringify(row));
            let state = {
                DB: false,
                YTJ: false,
                YWC: false,
                YZF: false,
            };
            switch (this.jobStateTabsIfy.selectIndex) {
                case 0:
                    state.DB = true;
                    break;
                case 1:
                    state.YTJ = true;
                    break;
                case 2:
                    state.YWC = true;
                    break;
                case 3:
                    state.YZF = true;
                    break;
            }
            const stateStr = Base64.encode(JSON.stringify(state));
            if (row.RELATION_IS_MANAGER) {
                this.router.navigate(
                    ['manager', { GL, stateStr, isHuman: row.RELATION_IS_HUMEN }],
                    {
                        relativeTo: this.activatedRoute,
                    }
                );
            } else {
                this.router.navigate(['basic', { GL, stateStr }], {
                    relativeTo: this.activatedRoute,
                });
            }
        },
        evtSelectorRow: index => {
            this.operTableIfy.selectedRowIndex = index;
        },

        selectedData: null,

        /**
         * 流程跟踪
         */
        evtSeeStep: data => {
            this.operTableIfy.selectedData = data;
        },
        evtStepOper: () => {},
    };

    /**
     * 业务搜索框
     */
    operSearchify = {
        width: 340,
        key: new Subject<string>(),
        value: null,
        list: [],
        evtOpenChange: status => {
            if (status) {
                this.operSearchify.value = null;
            }
        },
        // 文本框值改变回调
        evtOnSearch: (value: string) => {
            if (value.trim()) {
                this.operSearchify.key.next(value.trim());
            }
        },
        // 选中的optiong改变回调
        evtChange: value => {
            if (value === null) {
                return;
            }
            const data = {
                DATA_1002_PERSON_A01_ID: value,
                $TREE_INCLUDE_LOWER_LEVEL$: false,
                A0103: '01',
                ORG_B01_ID: this.userInfo.sessionUser.unitId,
                ORG_TYPE: this.userInfo.sessionUser.ORG_TYPE,
                VIEW_FIELD_TYPE: 4,
            };
            this.service.queryPersonRowNumber(data).subscribe(num => {
                const table = this.operTableIfy;
                table.pageIndex =
                    // tslint:disable-next-line:radix
                    parseInt(num / table.pageSize + '') + 1;
                table.selectedRowIndex = num % table.pageSize;
                table.evtPageChange();
            });
        },
    };

    /**
     * 业务状态标签
     */
    jobStateTabsIfy = {
        list: this.PelationEnums,
        selectIndex: 0,
        evtTabsChange: item => {
            this.operTableIfy.evtPageChange(true);
        },

        evtSteteToName: value => {},
    };

    constructor(
        private clientService: ClientService,
        private router: Router,
        private activatedRoute: ActivatedRoute,
        private commonService: CommonService,
        private service: ExamYearService
    ) {}

    ngOnInit() {
        this.userInfo = this.commonService.getUserLoginInfo();
        this.loadBreadcrumbNav();
        this.loadUserPower();
        this.operDeployIfy._loadYearList();
        this.operSearchify.key
            .pipe(
                // wait 300ms after each keystroke before considering the term
                debounceTime(100),
                // ignore new term if same as previous term
                distinctUntilChanged()
            )
            .subscribe(keyword => {
                const data = {
                    A0101: keyword.trim(),
                    $TREE_INCLUDE_LOWER_LEVEL$: false,
                    A0103: '01',
                    ORG_B01_ID: this.userInfo.sessionUser.unitId,
                    ORG_TYPE: this.userInfo.sessionUser.ORG_TYPE,
                    VIEW_FIELD_TYPE: 4,
                };
                this.service.queryPersonList(data).subscribe(result => {
                    this.operSearchify.list = result;
                });
            });
    }

    /**
     * 加载面包屑导航
     */
    loadBreadcrumbNav() {
        this.clientService.buildBreadCrumb([
            {
                type: 'home',
            },
            {
                type: 'text',
                text: '年度考核工作台',
            },
        ]);
    }

    /**
     * 获取账号权限
     */
    loadUserPower() {
        this.activatedRoute.data.subscribe((data: { tag: string }) => {
            const menus = this.commonService.getNavigeList();
            const menu = menus.find(item => item.SYSTEM_RESOURCE_GUARD_ID === data.tag);
            let childRen: any;
            if (menu) {
                childRen = menus.filter(item => item.SYS_PARENT === menu.SYSTEM_RESOURCE_TREE_ID);
                childRen.forEach(item => {
                    this.userInfo[item.SYSTEM_RESOURCE_GUARD_ID] = true;
                });
            }
        });
    }

    ngOnDestroy() {
        this.clientService.clearBreadCrumb();
    }
    /**
     * 部署业务
     */
    evtDeploy() {
        this.router.navigate(['leader'], { relativeTo: this.activatedRoute });
    }
}
