import {
    Component,
    OnInit,
    ViewChild,
    AfterViewInit,
    Input,
    Output,
    EventEmitter,
    ChangeDetectorRef,
} from '@angular/core';
import { JobStepInfo } from 'app/workflow/db/JobStepInfo';
import { WorkflowService } from 'app/workflow/workflow.service';
import { CommonService } from 'app/util/common.service';
import { NzMessageService } from 'ng-zorro-antd/message';
import { NzUploadXHRArgs, NzUploadFile } from 'ng-zorro-antd/upload';
import { NzModalService } from 'ng-zorro-antd/modal';
import { OnlineDocComponent } from 'app/components/online-doc/online-doc.component';
import { OperSelectPersonComponent } from 'app/components/oper-select-person/oper-select-person.component';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { StandingChangeComponent } from '../standing-change/standing-change.component';
import { IsTeacherTableComponent } from '../is-teacher-table/is-teacher-table.component';
import { SalaryInnerTransferService } from '../salary-inner-transfer.service';
import * as moment from 'moment';
import { WfDataChangeTypeEnum } from 'app/workflow/enums/WfDataChangeTypeEnum';
import { ColumnTypeEnum } from 'app/entity/enums/ColumnTypeEnum';
import { innerTransferFields } from '../Interface_scheme/fields';

@Component({
    // tslint:disable-next-line: component-selector
    selector: 's-transfer-table',
    templateUrl: './transfer-table.component.html',
    styleUrls: ['./transfer-table.component.scss'],
})
export class TransferTableComponent implements OnInit, AfterViewInit {
    /**
     * 业务信息
     */
    _jobStepInfo: JobStepInfo;
    @Input()
    set jobStepInfo(v) {
        if (v) {
            this._jobStepInfo = v;
        }
    }
    get jobStepInfo() {
        return this._jobStepInfo;
    }

    /**
     * 是否可编辑
     */
    @Input() isUsable = true;

    @Output() psnA01Changed = new EventEmitter<any>();
    @Output() auditTable = new EventEmitter<any>();

    isUpFullScreen = false;
    isDownFullScreen = false;

    childIds = ['A01', 'GZ01', 'GZ02', 'GZ09', 'GZ06', 'GZA01', 'GZ07', 'GZ10', 'GZDA07'];

    allChildsDatas = null;

    @ViewChild('isTeacherTableComponent', { static: false })
    _isTeacherTableComponent: IsTeacherTableComponent;
    @ViewChild('StandingChangeComponent', { static: false })
    _standingChangeComponent: StandingChangeComponent;
    /**
     * 人员基本子集
     */
    psnBaseInfoIfy = {
        TABLE_CODE: 'A01',
        list: <any>[
            {
                TABLE_CODE: 'A01',
                TABLE_NAME: '基本信息',
                type: 'single',
                IS_MAIN: true,
                PSN: true,
            },
            { TABLE_CODE: 'GZ01', TABLE_NAME: '学历信息', type: 'complex' },
            { TABLE_CODE: 'GZ02', TABLE_NAME: '岗位信息', type: 'complex' },
            { TABLE_CODE: 'GZ06', TABLE_NAME: '年度考核信息', type: 'complex' },
            { TABLE_CODE: 'GZ09', TABLE_NAME: '高低定信息', type: 'complex' },
            { TABLE_CODE: 'GZ42', TABLE_NAME: '处分情况', type: 'complex' },

            {
                TABLE_CODE: 'JBT',
                TABLE_NAME: '津补贴信息',
                type: 'single',
                IS_MAIN: false,
                PSN: true,
            },
            {
                TABLE_CODE: 'GZA01',
                TABLE_NAME: '工资标识信息',
                type: 'single',
                IS_MAIN: false,
                PSN: true,
            },
            {
                TABLE_NAME: '附件材料',
                TABLE_CODE: 'person_file',
            },
        ],
        evtTabChange: event => {
            console.log(event);
            if (event === 'person_file') {
                this.operPersonFileIfy._loadFileList();
                this.operPersonFileIfy._loadPersonFileList();
            }
        },
        // 加载静态json字段
        _initFields: () => {
            this.psnBaseInfoIfy.list.forEach(ele => {
                ele.fields = innerTransferFields[ele.TABLE_CODE];
                ele.result = ele.PSN ? {} : [];
            });
        },
        /**
         * 刷新除A01外的子集
         */
        updatePsnChildData: tableCode => {
            let childCode = `DATA_1002_PERSON_${tableCode}`;
            const { jobId, jobStepId, wfId } = this.jobStepInfo;
            const paramd = {
                jobId,
                jobStepId,
                wfId,
            };
            childCode = tableCode === 'JBT' ? 'DATA_1002_PERSON_GZDA07' : childCode;
            this.workflowService
                .getwfPersonDataList(paramd, this.personListIfy.selectedPsnData.keyId, childCode)
                .subscribe(result => {
                    this.psnBaseInfoIfy._buildUpdatePsnChilds(result || [], tableCode);
                });
        },
        // 构造数据
        _buildUpdatePsnChilds: (result, tableCode) => {
            const child = this.psnBaseInfoIfy.list.find(item => item.TABLE_CODE === tableCode);
            if (child.PSN) {
                const personInfo = result.find(_v => _v.IS_LAST_ROW);
                child.fields.forEach(f => {
                    this.formatDataField(f, personInfo);
                });
                child.result = personInfo || {};
            } else {
                child.fields.forEach(f => {
                    result.forEach(data => {
                        this.formatDataField(f, data);
                    });
                });
                child.result = result || [];
            }
        },
        result: null,
        field: null,
        /**
         * 编辑框
         */
        evtClick: (event, field, result) => {
            if (!this.isUsable) {
                return;
            }
            if (!this.personListIfy.selectedPsnData.keyId) {
                return;
            }
            this.psnBaseInfoIfy.result = result;
            this.psnBaseInfoIfy.field = field;
            if (this.psnBaseInfoIfy.TABLE_CODE !== 'GZA01' && field.TABLE_COLUMN_DICTIONARY_CODE) {
                this.codeListIfy.codeId = field.TABLE_COLUMN_DICTIONARY_CODE;
                this.codeListIfy.visible = true;
            }
            if (field.TABLE_COLUMN_CODE === 'A0134A') {
                // 工龄弹框
                this._standingChangeComponent.show();
            }
            console.log(this.psnBaseInfoIfy.TABLE_CODE);
            switch (this.psnBaseInfoIfy.TABLE_CODE) {
                case 'JBT':
                    // 津补贴
                    this.openEditDrawer.sign = field.GZ21A03_CODE;
                    this._isTeacherTableComponent.show();
                    break;
                case 'GZA01':
                    // 工资标识信息
                    if (field.GZ21A03_CODE) {
                        this.openEditDrawer.sign = field.GZ21A03_CODE;
                        this._isTeacherTableComponent.show();
                    } else {
                        this.codeListIfy.codeId = field.TABLE_COLUMN_DICTIONARY_CODE;
                        this.codeListIfy.visible = true;
                    }
                    break;
            }
        },
        // 输入框失去焦点事件
        evtBlur: (event, field, result) => {
            if (field.TABLE_COLUMN_CODE === 'A0184' && result.A0184) {
                this.psnBaseInfoIfy.idCardToDateAndGender(result);
            }
            if (field.TABLE_COLUMN_TYPE === ColumnTypeEnum.DATE) {
                // 时间数据是否有效，有效将其格式化
                result[field.TABLE_COLUMN_CODE] = moment(
                    result[field.TABLE_COLUMN_CODE],
                    'YYYYMMDD'
                ).isValid()
                    ? moment(result[field.TABLE_COLUMN_CODE], 'YYYYMMDD').format('YYYY-MM-DD')
                    : '';
            }
        },
        // 增加
        evtAddPsnData: () => {
            const child = this.psnBaseInfoIfy.list.find(
                item => item.TABLE_CODE === this.psnBaseInfoIfy.TABLE_CODE
            );
            // 构造静态数据
            const rowData = {};
            child.fields.forEach(f => {
                if (f.TABLE_COLUMN_DICTIONARY_CODE) {
                    rowData[f.TABLE_COLUMN_CODE] = '';
                    rowData[`${f.TABLE_COLUMN_CODE}_CN`] = '';
                } else {
                    rowData[f.TABLE_COLUMN_CODE] = '';
                }
            });
            rowData['SYS_SORT'] = child.result.length + 1;
            child.result.push(rowData);
        },
        // 删除
        evtDeleteData: row => {
            const child = this.psnBaseInfoIfy.list.find(
                item => item.TABLE_CODE === this.psnBaseInfoIfy.TABLE_CODE
            );
            const index = child.result.indexOf(row);
            if (!!row[`DATA_1002_PERSON_${child.TABLE_CODE}_ID`]) {
                const { jobId, jobStepId, jobDataId } = this.jobStepInfo;
                const param = [
                    {
                        jobId,
                        jobStepId,
                        jobDataId,
                        childId: row[`DATA_1002_PERSON_${child.TABLE_CODE}_ID`],
                        keyId: this.personListIfy.selectedPsnData.keyId,
                        changeType: WfDataChangeTypeEnum.DELETE,
                        tableId: 'DATA_1002_PERSON_' + child.TABLE_CODE,
                    },
                ];
                this.workflowService.deleteTableData(param).subscribe();
            }
            child.result.splice(index, 1);
            child.result = [...child.result];
        },
        // 保存
        evtSaveChildData: () => {
            if (!this.personListIfy.selectedPsnData.keyId) {
                this.message.warning('请先选择人员。');
                return;
            }
            const child = this.psnBaseInfoIfy.list.find(
                item => item.TABLE_CODE === this.psnBaseInfoIfy.TABLE_CODE
            );
            // 获取子集参数列表
            const params = this.psnBaseInfoIfy.getChangeFieldInfo(child);
            if (child.type === 'single') {
                this.workflowService.saveChangeData(params).subscribe(result => {
                    if (this.psnBaseInfoIfy.TABLE_CODE === 'A01') {
                        this.psnA01Changed.emit(result);
                    }
                });
            } else {
                this.workflowService.saveMultipleTableData(params).subscribe(result => {
                    this.psnBaseInfoIfy.updatePsnChildData(this.psnBaseInfoIfy.TABLE_CODE);
                });
            }
        },
        /**
         * 构造子集字段参数
         */
        getChangeFieldInfo: child => {
            // child.TABLE_CODE = child.TABLE_CODE === 'JBT' ? 'GZDA07' : child.TABLE_CODE;
            const childName = child.TABLE_CODE === 'JBT' ? 'GZDA07' : child.TABLE_CODE;
            const tableId = `DATA_1002_PERSON_${childName}_ID`;
            const codes = Object.keys(child.result);
            const { jobId, jobStepId, jobDataId } = this.jobStepInfo;
            const params: any = {
                jobId,
                jobStepId,
                jobDataId,
                tableId: `DATA_1002_PERSON_${childName}`,
                data: {},
            };
            const paramsArr = [];
            if (child.type === 'single') {
                child.fields.forEach(f => {
                    const ele = codes.find(item => item === f.TABLE_COLUMN_CODE);
                    params.data[ele] = child.result[ele];
                });
                params.keyId = this.personListIfy.selectedPsnData.keyId;
                switch (childName) {
                    case 'A01':
                        params.changeType = 1;
                        break;
                    case 'GZDA07':
                        params.changeType = child.result[tableId] ? 1 : 0;
                        params.childId = child.result[tableId] ? child.result[tableId] : '-1';
                        break;
                    case 'GZA01':
                        params.changeType = 1;
                        params.childId = child.result.DATA_1002_PERSON_GZA01_ID;
                        break;
                }
                return params;
            } else {
                child.result.forEach(item => {
                    if (child.TABLE_CODE === 'GZ02') {
                        // 保存GZ02子集时根据GZ0202的值给GZ0226赋值
                        switch (item.GZ0202.substring(0, 1)) {
                            case '0':
                                item['GZ0226'] = '01';
                                break;
                            case '1':
                                item['GZ0226'] = '05';
                                break;
                            case '2':
                                item['GZ0226'] = '06';
                                break;
                            case '3':
                                item['GZ0226'] = '09';
                                break;
                        }
                    }
                    const DATA = {
                        ...params,
                        keyId: this.personListIfy.selectedPsnData.keyId,
                        changeType: item[tableId] ? 1 : 0,
                        childId: item[tableId] ? item[tableId] : '-1',
                        data: item,
                    };
                    paramsArr.push(DATA);
                });
                return paramsArr;
            }
        },
        /**
         * 身份证号自动生成出生日期与性别
         */
        idCardToDateAndGender: result => {
            let gender;
            switch (result.A0184.length) {
                case 15:
                    result.A0107 = moment('19' + result.A0184.substring(6, 12), 'YYYYMMDD').format(
                        'YYYY-MM-DD'
                    );
                    gender = result.A0184.charAt(14) % 2 === 0 ? '女' : '男';
                    result.A0104_CN = gender;
                    result.A0104 = gender === '男' ? 1 : 2;
                    break;
                case 18:
                    result.A0107 = moment(result.A0184.substring(6, 14), 'YYYYMMDD').format(
                        'YYYY-MM-DD'
                    );
                    gender = result.A0184.charAt(16) % 2 === 0 ? '女' : '男';
                    result.A0104_CN = gender;
                    result.A0104 = gender === '男' ? 1 : 2;
                    break;
                default:
                    this.message.warning('身份证号输入错误！');
                    break;
            }
        },
    };

    /**
     * 代码框
     */
    codeListIfy = {
        codeId: null,
        text: null,
        value: null,
        visible: false,
        evtTextChange: value => {
            this.psnBaseInfoIfy.result[`${this.psnBaseInfoIfy.field.TABLE_COLUMN_CODE}_CN`] = value;
            this.psnBaseInfoIfy.result[
                this.psnBaseInfoIfy.field.TABLE_COLUMN_CODE
            ] = this.codeListIfy.value;
        },
    };

    /**
     * 工资子集
     */
    psnSalaryInfoIfy = {
        isSpinning: false,
        TABLE_CODE: 'GZDA07',
        list: <any>[
            {
                // GZDA07的最后一条数据
                TABLE_CODE: 'GZDA07',
                TABLE_NAME: '现执行工资',
                IS_MAIN: false,
                PSN: true,
            },
            { TABLE_CODE: 'GZ07', TABLE_NAME: '工资变迁' },
            { TABLE_CODE: 'GZ10', TABLE_NAME: '套改情况' },
        ],
        evtTabChange: event => {
            this.psnSalaryInfoIfy.pagination.pageChange(true);
        },
        _initFields: () => {
            this.psnSalaryInfoIfy.list.forEach(ele => {
                ele.fields = innerTransferFields[ele.TABLE_CODE];
                ele.result = ele.PSN ? {} : [];
            });
        },
        /**
         * 核算工资后刷新工资子集
         */
        updateGZDA07Child: () => {
            const childFields = {};
            this.psnSalaryInfoIfy.list.forEach(
                t => (childFields[`DATA_1002_PERSON_${t.TABLE_CODE}`] = [])
            );
            const { jobId, jobStepId } = this.jobStepInfo;
            const paramd = {
                jobId,
                jobStepId,
                keyIds: [this.personListIfy.selectedPsnData.keyId],
                childFields,
            };
            this.workflowService.getPsnList(this.service.wfId, paramd).subscribe(result => {
                if (result && Object.keys(result).length > 0) {
                    this.psnSalaryInfoIfy._buildUpdateSalaryChilds(result);
                }
            });
        },
        // 构造数据
        _buildUpdateSalaryChilds: result => {
            this.psnSalaryInfoIfy.list.forEach(table => {
                const childInfo = result[`DATA_1002_PERSON_${table.TABLE_CODE}`];
                if (table.PSN) {
                    const personInfo = childInfo.find(v => v.IS_LAST_ROW);
                    table.fields.forEach(v => {
                        this.formatDataField(v, personInfo);
                    });
                    table.result = personInfo || {};
                } else {
                    if (childInfo) {
                        table.fields.forEach(f => {
                            childInfo.forEach(item => {
                                this.formatDataField(f, item);
                            });
                        });
                    }
                    table.result = childInfo || [];
                    this.psnSalaryInfoIfy.pagination.pageChange(true);
                }
            });
        },
        pagination: {
            _initPage: () => {
                const { pageSize, pageIndex } = this.psnSalaryInfoIfy.pagination;
                const item = this.psnSalaryInfoIfy.list.find(
                    t => t.TABLE_CODE === this.psnSalaryInfoIfy.TABLE_CODE
                );
                if (item.PSN) {
                    return;
                }
                this.psnSalaryInfoIfy.pagination.total = item.result.length;
                item.data =
                    item.result.length > 0
                        ? item.result.slice(pageSize * (pageIndex - 1), pageIndex * pageSize)
                        : [];
                this.cdr.detectChanges();
            },
            pageIndex: 1,
            pageSize: 5,
            total: 0,
            /**
             * 工资子集数据分页
             */
            pageChange: (reset = false) => {
                if (reset) {
                    this.psnSalaryInfoIfy.pagination.pageIndex = 1;
                }
                this.psnSalaryInfoIfy.pagination._initPage();
            },
        },
    };

    openEditDrawer = {
        sign: null,
    };
    @ViewChild('operSelectPerson', { static: false }) _operSelectPerson: OperSelectPersonComponent;
    @ViewChild('scrollViewPersonList', { static: false })
    private _scrollViewPersonList: CdkVirtualScrollViewport;

    /**
     * 人员列表相关
     */
    personListIfy = {
        list: [],
        /**
         * 当前选中人员
         */
        selectedPsnData: <any>{ keyId: '' },
        isChange: null,
        evtAddPerson: () => {
            this._operSelectPerson.show();
        },
        evtDisabledPsn: () => {
            return this.personListIfy.list.map(p => p.keyId);
        },
        evtChange: () => {
            this.personListIfy._loadPersonList(true);
        },
        /**
         * 加载人员列表
         */
        _loadPersonList: (isRef = false) => {
            if (this.personListIfy.list.length > 0 && !isRef) {
                return;
            }
            const data = {
                jobId: this.jobStepInfo.jobId,
                jobStepId: this.jobStepInfo.jobStepId,
            };
            this.workflowService.getWfPersonList(this.jobStepInfo.wfId, data).subscribe(result => {
                this.personListIfy.list = result.map(v => {
                    return {
                        name: v.A0101,
                        keyId: v.DATA_1002_PERSON_A01_ID,
                    };
                });
                if (this.personListIfy.list.length > 0) {
                    this.personListIfy.evtSelectedPerson(this.personListIfy.list[0]);
                    // 刷新预览界面
                }
                this.loadPersonData(true);
            });
        },
        // 人员选中
        evtSelectedPerson: data => {
            this.personListIfy.selectedPsnData = data;
            this.loadPersonData(true);
        },

        evtTransferPsnList: () => {
            return this.personListIfy.list;
        },

        // 填写业务信息人员列表搜索
        find: {
            placeholder: '请输入姓名关键字搜索',
            value: null,
            nzFilterOption: () => true,
            list: [],
            evtChange: event => {
                const index = this.personListIfy.list.findIndex(p => p.keyId === event);
                if (index > -1) {
                    // 设置选中
                    this.personListIfy.selectedPsnData = this.personListIfy.list[index];
                    this.personListIfy.find.locationSelectPsn(index);
                    this.personListIfy.evtSelectedPerson(this.personListIfy.selectedPsnData);
                }
            },
            evtSearch: value => {
                if (value) {
                    this.personListIfy.find.list = this.personListIfy.list
                        .filter(item => item.name.indexOf(value) > -1)
                        .map(p => {
                            return {
                                text: p.name,
                                value: p.keyId,
                            };
                        });
                }
            },
            evtOpenChange: status => {
                if (status) {
                    this.personListIfy.find.value = null;
                }
            },
            // 定位选中人员，滚动至固定位置
            locationSelectPsn: index => {
                setTimeout(() => {
                    const [psn] = this.personListIfy.list[index];
                    const el = <HTMLElement>psn.component.dragElement.nativeElement;
                    this._scrollViewPersonList.scrollToOffset(el.offsetTop);
                }, 300);
            },
        },

        // 撤选
        evtDeletePerson: item => {
            this.modalService.confirm({
                nzTitle: '系统提示?',
                nzContent: `<b style="color: red;">确定要撤选${item.name}吗？</b>`,
                nzOkText: '确定',
                nzOkType: 'danger',
                nzOnOk: () => {
                    const data = {
                        jobId: this.jobStepInfo.jobId,
                        jobStepId: this.jobStepInfo.jobStepId,
                        keyIds: [item.keyId],
                    };
                    this.workflowService
                        .deletePerson(this.jobStepInfo.wfId, data)
                        .subscribe(result => {
                            let delIndex = this.personListIfy.list.findIndex(p => p === item);
                            this.personListIfy.list.splice(delIndex, 1);
                            this.personListIfy.list = [...this.personListIfy.list];

                            if (delIndex === this.personListIfy.list.length) {
                                delIndex--;
                            }
                            // 设置选中
                            this.personListIfy.selectedPsnData =
                                delIndex === -1 ? null : this.personListIfy.list[delIndex];
                            if (this.personListIfy.list.length > 0) {
                                this.personListIfy.evtSelectedPerson(
                                    this.personListIfy.selectedPsnData
                                );
                                // 刷新预览界面
                            }
                        });
                },
                nzCancelText: '取消',
                nzOnCancel: () => console.log('Cancel'),
            });
        },
        evtPsnA01Changed: value => {
            this.personListIfy.list.find(psn => psn.keyId === value.keyId).name = value.data.A0101;
        },
    };

    @ViewChild('onlineDocOverlayElement', { static: false })
    onlineDocOverlayElement: OnlineDocComponent;
    /**
     * 上传附件材料
     */
    operPersonFileIfy = {
        data: [],
        loading: false,
        /**
         * 加载业务人员 上传附件列表
         */
        _loadFileList: () => {
            if (this.operPersonFileIfy.data.length > 0) {
                this.operPersonFileIfy._loadPersonFileList();
                return;
            }
            const data = {
                wfId: this.service.wfId,
                stepId: this.jobStepInfo.stepId,
            };
            this.workflowService.getWfFileByWfIdAndStepId(data).subscribe(result => {
                this.operPersonFileIfy.data = result;
                if (this.personListIfy.list.length > 0) {
                    this.operPersonFileIfy._loadPersonFileList();
                }
            });
        },
        /**
         * 加载个人已上传附件
         */
        _loadPersonFileList: () => {
            const personInfo = this.personListIfy.selectedPsnData;
            if (!personInfo) {
                return;
            }
            if (personInfo.fileList && personInfo.fileList.length > 0) {
                this.operPersonFileIfy._setPersonFileStatus();
                return;
            }
            const data = {
                jobId: this.jobStepInfo.jobId,
                keyId: personInfo.keyId,
            };
            this.workflowService.getPersonFileList(data).subscribe(result => {
                personInfo.fileList = result.map(file => ({
                    ...file,
                    url: file.filePath,
                    size: file.fileSize,
                    name: file.fileName,
                    type: file.fileType,
                }));
                this.operPersonFileIfy._setPersonFileStatus();
            });
        },
        /**
         * 设置人员附件状态
         */
        _setPersonFileStatus: () => {
            const personInfo = this.personListIfy.selectedPsnData;
            if (personInfo.fileList.length === 0) {
                this.operPersonFileIfy.data.map(d => (d.fileList = []));
                return;
            }
            this.operPersonFileIfy.data.forEach(row => {
                const list = personInfo.fileList.filter(item => item.annexId === row.annexId);
                row.fileList = this.onlineDocOverlayElement.buildThumbUrl(list);
            });
        },

        evtViewFile: row => {
            this.operPersonFileIfy.fileListIfy.row = row;
            this.operPersonFileIfy.fileListIfy.open();
        },

        selectFile: null,
        evtUpload: row => {
            this.operPersonFileIfy.selectFile = row;
        },
        fileCustomRequest: item => {
            // 构建一个 FormData 对象，用于存储文件或其他参数
            const formData = new FormData();
            // tslint:disable-next-line:no-any
            formData.append('file', item.file as any, item.file.name);
            this.commonService.fileUpload(formData).subscribe(result => {
                const file = {
                    fileName: item.file.name,
                    filePath: `${this.commonService.getDownFileURL(
                        result.fileId,
                        result.fileName
                    )}`,
                    fileType: result.fileType,
                    fileSize: result.fileSize,
                    fileId: result.fileId,
                };
                this.operPersonFileIfy._savePersonFileData(file, item.data);
            });
        },

        /**
         * 保存人员附件
         */
        _savePersonFileData: (file, data) => {
            const personInfo = this.personListIfy.selectedPsnData;
            const params = {
                jobId: this.jobStepInfo.jobId,
                jobStepId: this.jobStepInfo.jobStepId,
                jobDataId: this.jobStepInfo.jobDataId,
                keyId: personInfo.keyId,
                annexId: data.annexId,
                ...file,
            };
            this.workflowService.savePersonAnnex(params).subscribe(result => {
                personInfo.fileList = personInfo.fileList ? personInfo.fileList : [];
                personInfo.fileList.push({
                    ...result,
                    url: result.filePath,
                    size: result.fileSize,
                    name: result.fileName,
                    type: result.fileType,
                });
                this.operPersonFileIfy._setPersonFileStatus();
            });
        },

        selectedIndex: 0,
        list: [],
        preview: file => {
            const item = this.operPersonFileIfy.data.find(v => v.annexId === file.annexId);

            const personInfo = this.personListIfy.selectedPsnData;
            this.operPersonFileIfy.list = personInfo.fileList
                .filter(v => v.annexId === file.annexId)
                .map(x => ({ ...x, fileName: x.fileName }));

            const index = item.fileList.findIndex(v => v.id === file.id);
            this.onlineDocOverlayElement.selectedIndex = index;
            this.onlineDocOverlayElement.show();
            return false;
        },

        fileRemove: file => {
            const item = this.operPersonFileIfy.data.find(v => v.annexId === file.annexId);
            const index = item.fileList.findIndex(v => v.id === file.id);
            item.fileList.splice(index, 1);
            item.fileList = [...item.fileList];
            this.workflowService.deletePersonFile(file.id).subscribe(() => {
                const personInfo = this.personListIfy.selectedPsnData;
                personInfo.fileList.splice(
                    personInfo.fileList.findIndex(v => v.id === file.id),
                    1
                );
            });
        },

        fileListIfy: {
            visible: false,
            title: '人员附件列表',
            width: 400,
            selectedIndex: 0,
            close: () => (this.operPersonFileIfy.fileListIfy.visible = false),
            open: () => {
                this.operPersonFileIfy.fileListIfy._buildFiletList();
                this.operPersonFileIfy.fileListIfy.visible = true;
            },
            row: null,
            list: [],
            _buildFiletList: () => {
                const personInfo = this.personListIfy.selectedPsnData;
                this.operPersonFileIfy.fileListIfy.list = personInfo.fileList.filter(
                    item => item.annexId === this.operPersonFileIfy.fileListIfy.row.annexId
                );
                this.operPersonFileIfy.fileListIfy.list.map(v => (v.fileName = v.fileName));
            },
            fileRemove: (file: NzUploadFile): boolean => {
                const personInfo = this.personListIfy.selectedPsnData;
                const _index = personInfo.fileList.findIndex(x => x.keyId === file.keyId);
                personInfo.fileList.splice(_index, 1);
                this.operPersonFileIfy.fileListIfy._buildFiletList();
                this.workflowService.deletePersonFile(file.id).subscribe(() => {
                    this.operPersonFileIfy.fileListIfy.row.haveFile = personInfo.fileList.length;
                });
                return true;
            },
            preview: (file: NzUploadFile) => {
                const _index = this.operPersonFileIfy.fileListIfy.list.findIndex(
                    x => x.fileId === file.fileId
                );
                this.operPersonFileIfy.fileListIfy.selectedIndex = _index;
                this.onlineDocOverlayElement.show();
                return false;
            },
        },
    };
    constructor(
        private commonService: CommonService,
        private cdr: ChangeDetectorRef,
        private workflowService: WorkflowService,
        private service: SalaryInnerTransferService,
        private message: NzMessageService,
        private modalService: NzModalService
    ) {}

    ngOnInit() {
        // 初始化字段数据
        this.psnBaseInfoIfy._initFields();
        this.psnSalaryInfoIfy._initFields();
        this.personListIfy._loadPersonList();
    }

    ngAfterViewInit() {}

    /**
     * 取表格工资数据
     */
    getTableData() {
        const data = {
            jobId: this.jobStepInfo.jobId,
            jobStepId: this.jobStepInfo.jobStepId,
        };
        this.workflowService.getWfListData(data).subscribe(result => {
            const child = this.psnBaseInfoIfy.list.find(item => item.TABLE_CODE === 'GZA01');
            const personInfo = result.find(
                item => item.DATA_1002_PERSON_A01_ID === this.personListIfy.selectedPsnData.keyId
            );
            child.fields.forEach(v => {
                this.formatDataField(v, personInfo);
            });
            child.result = personInfo || {};
        });
    }

    // 页面放大缩小
    evtUpDownArrows(type) {
        if (type === 'up') {
            this.isUpFullScreen = !this.isUpFullScreen;
        } else {
            this.isDownFullScreen = !this.isDownFullScreen;
            if (this.psnSalaryInfoIfy.TABLE_CODE !== 'GZDA07') {
                this.psnSalaryInfoIfy.pagination.pageSize = this.isDownFullScreen ? 10 : 5;
                this.psnSalaryInfoIfy.pagination.pageChange(true);
            }
        }
    }

    // 核算工资
    checkSalary() {
        if (!this.personListIfy.selectedPsnData.keyId) {
            this.message.warning('请先选择人员。');
            return;
        }
        this.psnSalaryInfoIfy.isSpinning = true;
        const par = {
            jobId: this.jobStepInfo.jobId,
            jobStepId: this.jobStepInfo.jobStepId,
            handlerIds: ['601'],
            keyIds: [this.personListIfy.selectedPsnData.keyId],
        };
        this.workflowService.salaryCalculation(par).subscribe(result => {
            this.psnSalaryInfoIfy.isSpinning = false;
            if (result) {
                this.psnSalaryInfoIfy.updateGZDA07Child();
            }
        });
    }

    /**
     * 计算A0134A，A0149，A0134B
     *
     * 间断工龄A0134B由工龄抽屉的GZ1402间断月数赋值
     * 工龄A0134A = 当前时间 -（参工时间A0134 + 间断的月数A0134B）+ 1
     * 连续工龄起算时间A0149 = 参工时间A0134 + 间断的月数A0134B
     */
    calculateA0134A(value) {
        const child = this.psnBaseInfoIfy.list.find(item => item.TABLE_CODE === 'A01');
        if (!child.result['A0134']) {
            return;
        }
        child.result['A0134B'] = Number(value);
        const A0134 = moment(child.result['A0134']).format('YYYY-MM-DD');
        const A0134Year = Number(moment(child.result['A0134']).format('YYYY'));
        const sumMonth = Number(A0134.substring(5, 7)) + Number(value);
        const day = A0134.substring(8);
        if (sumMonth > 12) {
            this.psnBaseInfoIfy.result.A0134A =
                Number(moment(new Date()).format('YYYY')) - (A0134Year + 1) + 1;
            const A0149Month = sumMonth - 12 >= 10 ? sumMonth - 12 : `0${sumMonth - 12}`;
            const param = Math.floor(sumMonth / 12);
            this.psnBaseInfoIfy.result.A0149 = moment(
                `${A0134Year + param}-${A0149Month}-${day}`
            ).format('YYYY-MM-DD');
        } else {
            this.psnBaseInfoIfy.result.A0134A =
                Number(moment(new Date()).format('YYYY')) - A0134Year + 1;

            const A0149M = sumMonth >= 10 ? sumMonth : `0${sumMonth}`;
            this.psnBaseInfoIfy.result.A0149 = moment(`${A0134Year}${A0149M}${day}`).format(
                'YYYY-MM-DD'
            );
        }
    }

    /**
     * 更新津补贴信息和工资标识信息
     */
    updateJBTorGZBS() {
        switch (this.psnBaseInfoIfy.TABLE_CODE) {
            case 'GZA01':
                this.psnBaseInfoIfy.updatePsnChildData('GZA01');
                break;
            case 'JBT':
                this.psnBaseInfoIfy.updatePsnChildData('JBT');
                break;
        }
    }

    /**
     * 加载所有子集数据
     */
    loadPersonData(isRef = false) {
        if (!this.personListIfy.selectedPsnData.keyId) {
            const tableLists = this.psnBaseInfoIfy.list.concat(this.psnSalaryInfoIfy.list);
            tableLists.forEach(item => {
                item.result = item.PSN ? {} : [];
            });
            return;
        }
        if (!isRef) {
            this.buildSetChildData();
            return;
        }
        const childFields = {};
        this.childIds.forEach(v => (childFields[`DATA_1002_PERSON_${v}`] = []));
        const params = {
            jobId: this.jobStepInfo.jobId,
            jobStepId: this.jobStepInfo.jobStepId,
            keyIds: [this.personListIfy.selectedPsnData.keyId],
            childFields,
        };
        this.workflowService.getPsnList(this.service.wfId, params).subscribe(result => {
            this.allChildsDatas = result;
            this.buildSetChildData();
        });
    }

    /**
     * 处理构造子集数据
     */
    buildSetChildData() {
        const tableLists = this.psnBaseInfoIfy.list.concat(this.psnSalaryInfoIfy.list);
        tableLists.forEach(table => {
            // table.TABLE_CODE = table.TABLE_CODE === 'JBT' ? 'GZDA07' : table.TABLE_CODE;
            const childName = table.TABLE_CODE === 'JBT' ? 'GZDA07' : table.TABLE_CODE;
            const child = this.allChildsDatas[`DATA_1002_PERSON_${childName}`];
            // 主集A01
            if (table.IS_MAIN && table.PSN) {
                table.fields.forEach(v => {
                    this.formatDataField(v, child[0]);
                    if (
                        v.TABLE_COLUMN_CODE === 'GZ0101' &&
                        this.allChildsDatas['DATA_1002_PERSON_GZ01']
                    ) {
                        const item = this.allChildsDatas['DATA_1002_PERSON_GZ01'].find(
                            f => f.IS_LAST_ROW
                        );
                        child[0].GZ0101 = item ? item.GZ0101 : '';
                        child[0].GZ0101_CN = item ? item.GZ0101_CN : '';
                    } else if (
                        v.TABLE_COLUMN_CODE === 'GZ0202' &&
                        this.allChildsDatas['DATA_1002_PERSON_GZ02']
                    ) {
                        const item = this.allChildsDatas['DATA_1002_PERSON_GZ02'].find(
                            d => d.IS_LAST_ROW
                        );
                        child[0]['GZ0202'] = item ? item.GZ0202 : '';
                        child[0]['GZ0202_CN'] = item ? item.GZ0202_CN : '';
                    }
                });
                table.result = child[0] || {};
            }

            // 子集最后一条
            if (!table.IS_MAIN && table.PSN) {
                if (child) {
                    const personInfo = child.find(f => f.IS_LAST_ROW);
                    table.fields.forEach(v => {
                        this.formatDataField(v, personInfo);
                    });
                    table.result = personInfo || {};
                } else {
                    table.result = {};
                }
            }

            // 子集所有数据
            if (!table.PSN) {
                if (child) {
                    table.fields.forEach(f => {
                        child.forEach(item => {
                            this.formatDataField(f, item);
                        });
                    });
                }
                table.result = child || [];
                this.psnSalaryInfoIfy.pagination.pageChange(true);
            }
        });
    }

    /**
     * 时间数据是否有效，有效将其格式化
     */
    formatDataField(field, data) {
        if (field.TABLE_COLUMN_TYPE === ColumnTypeEnum.DATE) {
            if (data && moment(data[field.TABLE_COLUMN_CODE], 'YYYYMMDD').isValid()) {
                data[field.TABLE_COLUMN_CODE] = moment(
                    data[field.TABLE_COLUMN_CODE],
                    'YYYYMMDD'
                ).format('YYYY-MM-DD');
            }
        }
        return data;
    }
}
