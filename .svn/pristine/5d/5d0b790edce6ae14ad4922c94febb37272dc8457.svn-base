import { FormGroup, FormControl, Validators } from '@angular/forms';
import {
    AfterViewInit,
    ChangeDetectorRef,
    Component,
    ElementRef,
    Input,
    OnInit,
    ViewChild,
} from '@angular/core';
import { JobStepInfo } from 'app/workflow/db/JobStepInfo';
import { WorkflowService } from 'app/workflow/workflow.service';
import { CommonService } from 'app/util/common.service';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { OnlineDocComponent } from 'app/components/online-doc/online-doc.component';
import { SalaryCivilLevelRiseService } from '../salary-civil-level-rise.service';
import { WfDataChangeTypeEnum } from 'app/workflow/enums/WfDataChangeTypeEnum';
import { SalaryGz07DrawerComponent } from 'app/components/salary-gz07/salary-gz07-drawer/salary-gz07-drawer.component';
import { NzModalService } from 'ng-zorro-antd/modal';
import { OperSelectPersonComponent } from 'app/components/oper-select-person/oper-select-person.component';
import { JobStepStateEnum } from 'app/workflow/enums/JobStepStateEnum';
import { WfTableHelper } from 'app/util/classes/wf-table-helper';
@Component({
    // tslint:disable-next-line:component-selector
    selector: 's-level-person-table',
    templateUrl: './civil-level-person-table.component.html',
    styleUrls: ['./civil-level-person-table.component.scss'],
})
export class CivilLevelPersonTableComponent implements OnInit, AfterViewInit {
    constructor(
        private commonService: CommonService,
        private cdr: ChangeDetectorRef,
        private workflowService: WorkflowService,
        private modalService: NzModalService,
        private service: SalaryCivilLevelRiseService,
        private tableHelper: WfTableHelper
    ) { }

    /**
     * 业务是否可编辑
     */
    canEdit = false;

    /**
     * 业务信息
     */
    _jobStepInfo: JobStepInfo;
    @Input()
    set jobStepInfo(v) {
        if (v) {
            this.canEdit = v.jobStepState === JobStepStateEnum.PROCESSING;
            this._jobStepInfo = v;
            this.getPsnList();
        }
    }
    get jobStepInfo() {
        return this._jobStepInfo;
    }

    /**
     * 表格总数据
     */
    @Input() data = <any>[];

    @ViewChild('operSelectPerson', { static: false }) operSelectPerson: OperSelectPersonComponent;
    /**
     * 第二步 人员相关
     */
    personSelectIfy = {
        filterParmas: {
            A0151S: ['01', '05', '06',],
        },
        psnKeyId: <any>[],
        /**
         * 选择人员
         */
        evtSelectPerson: () => {
            this.operSelectPerson.show();
        },
        evtChange: () => {
            this.getPsnList();
        },
        psnDataChange: () => {
            // 人员禁选列表
            return this.riesTabIfy.list.map(p => p[`${this.tableHelper.getTableCode('A01')}_ID`]);
        },
    };

    riesTabIfy = {
        selectIndex: 0,
        list: [],
        change: () => {
            const data = this.riesTabIfy.list[this.riesTabIfy.selectIndex].DATA;
            const [first] = data;
            if (!first) {
                this.riesTabIfy.radioTABLE_DATA = [];
                this.riesTabIfy.radioValue = null;
                return;
            }
            this.riesTabIfy.radioValue = first.VALUE;
            this.riesTabIfy.radioChange();
        },

        radioValue: null,
        radioTABLE_DATA: [],
        radioChange: () => {
            const data = this.riesTabIfy.list[this.riesTabIfy.selectIndex].DATA;
            const item = data.find(v => v.VALUE === this.riesTabIfy.radioValue);
            this.riesTabIfy.radioTABLE_DATA = item.TABLE_DATA;
        },

        table: {
            loading: false,
            selectedKeyId: null,
        },
    };

    @ViewChild('personTableElement', { static: false }) personTableElement: ElementRef;
    @ViewChild('onlineDocOverlayElement', { static: false })
    onlineDocOverlayElement: OnlineDocComponent;

    /**
     * 考核信息编辑
     */
    assessEditIfy = {
        visible: false,
        width: 440,
        title: '考核信息',
        form: new FormGroup({
            GZ0601: new FormControl({ value: null, disabled: true }),
            GZ0602: new FormControl(null, [Validators.required]),
        }),
        data: <any>{},
        open: () => {
            this.assessEditIfy.visible = true;
        },
        close: () => {
            this.assessEditIfy.visible = false;
        },

        save: () => {
            if (this.commonService.formVerify(this.assessEditIfy.form)) {
                const data = this.assessEditIfy.data;
                const resultData = {
                    keyId: data.DATA_1002_PERSON_A01_ID,
                    childId: data.GZ06Id,
                    jobId: this.jobStepInfo.jobId,
                    jobStepId: this.jobStepInfo.jobStepId,
                    jobDataId: this.jobStepInfo.jobDataId,
                    changeType: WfDataChangeTypeEnum.MODIFY,
                    tableId: `DATA_1002_PERSON_GZ06`,
                    data: {
                        ...this.assessEditIfy.form.getRawValue(),
                    },
                };
                this.workflowService.saveChangeData(resultData).subscribe(() => {
                    this.assessEditIfy.close();
                    this.getPsnList();
                });
            }
        },
    };

    viewIsNotRiseIfy = {
        visible: false,
        width: 440,
        title: '未晋升原因',
        NewGZDA0760: '',
        open: () => {
            this.viewIsNotRiseIfy.visible = true;
        },
        close: () => {
            this.viewIsNotRiseIfy.visible = false;
        },
    };

    @ViewChild('salaryGZ07Element', { static: false }) salaryGZ07Element: SalaryGz07DrawerComponent;

    ngOnInit() { }

    ngAfterViewInit() {
        // 计算表格虚拟滚动宽高
        fromEvent(window, 'resize')
            .pipe(debounceTime(300))
            .subscribe(() => { });
    }

    /**
     * 获取人员列表
     */
    getPsnList() {
        const params = {
            jobId: this.jobStepInfo.jobId,
            jobStepId: this.jobStepInfo.jobStepId,
        };
        this.service.selectTabAndTableData(params).subscribe(result => {
            this.riesTabIfy.list = result;
            this.riesTabIfy.change();
        });
    }

    calculation(data) {
        this.riesTabIfy.table.loading = true;
        const params = {
            jobId: this.jobStepInfo.jobId,
            jobStepId: this.jobStepInfo.jobStepId,
            isAllData: true,
            handlerIds: ['E01'],
            keyIds: [data.DATA_1002_PERSON_A01_ID],
        };
        this.workflowService.salaryCivilCalculation(params).subscribe(result => {
            this.riesTabIfy.table.loading = false;
            if (result) {
                this.getPsnList();
            }
        });
    }

    salaryExecuteAll() {
        this.riesTabIfy.table.loading = true;
        const params = {
            jobId: this.jobStepInfo.jobId,
            jobStepId: this.jobStepInfo.jobStepId,
            isAllData: true,
            handlerIds: ['E01'],
            keyIds: [],
        };
        this.workflowService.salaryCivilCalculation(params).subscribe(result => {
            this.riesTabIfy.table.loading = false;
            if (result) {
                this.getPsnList();
            }
        });
    }

    deletePerson(item) {
        this.modalService.confirm({
            nzTitle: '系统提示?',
            nzContent: `<b style="color: red;">确定要撤选吗？</b>`,
            nzOkText: '确定',
            nzOkType: 'danger',
            nzOnOk: () => {
                this.riesTabIfy.table.loading = true;
                const data = {
                    jobId: this.jobStepInfo.jobId,
                    jobStepId: this.jobStepInfo.jobStepId,
                    keyIds: [item.DATA_1002_PERSON_A01_ID],
                };
                this.workflowService.deletePerson(this.jobStepInfo.wfId, data).subscribe(result => {
                    this.riesTabIfy.table.loading = false;
                    this.getPsnList();
                });
            },
            nzCancelText: '取消',
            nzOnCancel: () => console.log('Cancel'),
        });
    }

    viewIsNotRise(item) {
        this.viewIsNotRiseIfy.NewGZDA0760 = item.NewGZDA0760;
        this.viewIsNotRiseIfy.open();
    }

    wageChange(item) {
        this.riesTabIfy.table.selectedKeyId = item.DATA_1002_PERSON_A01_ID;
        this.salaryGZ07Element.show();
    }

    assessEdit(item) {
        this.assessEditIfy.data = item;
        this.assessEditIfy.form.reset({
            GZ0601: item.GZ0601,
            GZ0602: item.GZ0602,
        });
        this.assessEditIfy.open();
    }
}
