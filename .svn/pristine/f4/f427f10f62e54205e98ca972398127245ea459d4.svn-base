import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import { JobStepInfo } from 'app/workflow/db/JobStepInfo';
import { WorkflowService } from 'app/workflow/workflow.service';
import { CommonService } from 'app/util/common.service';
import { NzUploadXHRArgs, NzUploadFile } from 'ng-zorro-antd/upload';
import { NzModalService } from 'ng-zorro-antd/modal';

import { NzMessageService } from 'ng-zorro-antd/message';
import { WfDataChangeTypeEnum } from 'app/workflow/enums/WfDataChangeTypeEnum';

import { OnlineDocComponent } from 'app/components/online-doc/online-doc.component';
import * as moment from 'moment';

@Component({
    // tslint:disable-next-line: component-selector
    selector: 'standing-change',
    templateUrl: './standing-change.component.html',
    styleUrls: ['./standing-change.component.scss'],
})
export class StandingChangeComponent implements OnInit {
    /**
     * 业务信息
     */
    _jobStepInfo: JobStepInfo;
    @Input()
    set jobStepInfo(v) {
        if (v) {
            this._jobStepInfo = v;
        }
    }
    get jobStepInfo() {
        return this._jobStepInfo;
    }
    @Output() isChange = new EventEmitter<any>();

    /**
     * 当前选中人员keyId
     */
    @Input() personInf: any;

    /**
     * 工龄抽屉
     */
    standChangeDrawer = {
        A01AndGZA01: <any>{
            A01: {},
            GZA01: {},
        },
        visible: false,
        width: 600,
        data: <any>[],
        open: () => (this.standChangeDrawer.visible = true),
        close: () => {
            this.getWfData();
            let sumGZ1402 = 0;
            this.standChangeDrawer.data.forEach(ele => {
                if (ele.GZ1402) {
                    sumGZ1402 += Number(ele.GZ1402);
                }
            });
            this.isChange.emit(sumGZ1402);
            this.standChangeDrawer.visible = false;
        },
        /**
         * 增加数据
         */
        addRow: () => {
            this.standChangeDrawer.data = [
                ...this.standChangeDrawer.data,
                {
                    GZ1401: '',
                    GZ1402: '',
                    GZ1403: '',
                },
            ];
        },
        /**
         * 保存
         */
        saveChangeData: (data, index, status?, event?) => {
            // data.GZ1401 = this.datePipe.transform(data.GZ1401, 'yyyy-MM-dd');
            data.GZ1401 = moment(data.GZ1401, 'YYYYMMDD').isValid()
                ? moment(data.GZ1401, 'YYYYMMDD').format('YYYY-MM-DD')
                : '';
            if (status) {
                data[status] = event;
            }
            const resultData = {
                keyId: this.personInf,
                childId: data.tableId ? data.tableId : -1,
                jobId: this.jobStepInfo.jobId,
                jobStepId: this.jobStepInfo.jobStepId,
                jobDataId: this.jobStepInfo.jobDataId,
                changeType: data.tableId ? WfDataChangeTypeEnum.MODIFY : WfDataChangeTypeEnum.ADD,
                tableId: `DATA_1002_PERSON_GZ14`,
                data: data,
            };
            this.workflowService.saveChangeData(resultData).subscribe(result => {
                // 新增
                if (resultData.changeType === 0) {
                    this.standChangeDrawer.data[index].tableId = result.childId;
                }
            });
        },
        saveChangeDataGZA01: data => {
            const resultData = {
                keyId: this.personInf,
                childId: data.DATA_1002_PERSON_GZA01_ID,
                jobId: this.jobStepInfo.jobId,
                jobStepId: this.jobStepInfo.jobStepId,
                jobDataId: this.jobStepInfo.jobDataId,
                changeType: WfDataChangeTypeEnum.MODIFY,
                tableId: `DATA_1002_PERSON_GZA01`,
                data: data,
            };
            this.workflowService.saveChangeData(resultData).subscribe();
        },
        /**
         * 删除
         */
        deleteRow: (data, index) => {
            this.modalService.confirm({
                nzTitle: '系统提示?',
                nzContent: `<b style="color: red;">确定要删除当前记录吗？</b>`,
                nzOkText: '确定',
                nzOkType: 'danger',
                nzOnOk: () => {
                    if (data['tableId']) {
                        const dataArray = [
                            {
                                childId: data.tableId,
                                keyId: this.personInf,
                                jobId: this.jobStepInfo.jobId,
                                jobStepId: this.jobStepInfo.jobStepId,
                                jobDataId: this.jobStepInfo.jobDataId,
                                changeType: WfDataChangeTypeEnum.DELETE,
                                tableId: 'DATA_1002_PERSON_GZ14',
                            },
                        ];
                        this.workflowService.deleteTableData(dataArray).subscribe();
                    }
                    this.standChangeDrawer.data.splice(index, 1);
                    this.standChangeDrawer.data = [...this.standChangeDrawer.data];
                },
                nzCancelText: '取消',
                nzOnCancel: () => console.log('Cancel'),
            });
        },
        calculation: () => {
            const data = {
                jobId: this.jobStepInfo.jobId,
                jobStepId: this.jobStepInfo.jobStepId,
                // isAllData: false,
                // handlerIds工资处理器业务
                handlerIds: ['601'],
                keyIds: [this.personInf],
            };
            this.workflowService.salaryCalculation(data).subscribe(result => {
                this.getWfData();
            });
        },
    };
    @ViewChild('onlineDocOverlayElement', { static: false })
    onlineDocOverlayElement: OnlineDocComponent;
    /**
     *上传附件
     */
    upload = {
        visible: false,
        width: 400,
        currentPerson: null,
        selectIndex: -1,
        open: (data, i) => {
            this.upload.currentPerson = data;
            if (!data.tableId) {
                this.message.warning('请先填写基本信息!');
                return;
            }
            this.upload.selectIndex = i;
            this.upload.visible = true;
            this.upload.uploadIfy.getPersonFileList(data);
        },
        close: () => {
            this.upload.visible = false;
        },
        /**
         * 文件上传
         */
        uploadIfy: {
            selectedIndex: 0,
            fileCustomRequest: (item: NzUploadXHRArgs) => {
                // 构建一个 FormData 对象，用于存储文件或其他参数
                const formData = new FormData();
                // tslint:disable-next-line:no-any
                formData.append('file', item.file as any, item.file.name);
                const file = Object.assign(item.file, {
                    fileName: item.file.name,
                });
                // this.upload.uploadIfy.list.push(file);
                this.commonService.fileUpload(formData).subscribe(result => {
                    file.fileId = result.fileId;
                    file.url = result.filePath = `${this.commonService.getDownFileURL(
                        result.fileId,
                        result.fileName
                    )}`;
                    file.operFiles = result;
                    file.fileId = result.fileId;
                    // this.upload.uploadIfy.list = [...this.upload.uploadIfy.list];
                    this.upload.uploadIfy.savePersonAnnex(result);
                });
            },

            /**
             * 删除文件-静态删除
             */
            fileRemove: (file: NzUploadFile): boolean => {
                const _index = this.upload.uploadIfy.list.findIndex(x => x.fileId === file.fileId);
                this.upload.uploadIfy.deletePersonFile(this.upload.uploadIfy.list[_index]);
                this.upload.uploadIfy.list.splice(_index, 1);
                this.upload.uploadIfy.list = [...this.upload.uploadIfy.list];

                return true;
            },
            preview: (file: NzUploadFile) => {
                const _index = this.upload.uploadIfy.list.findIndex(x => x.fileId === file.fileId);
                this.upload.uploadIfy.selectedIndex = _index;
                this.onlineDocOverlayElement.show();
                return false;
            },
            /**
             * 保存人员附件
             */
            savePersonAnnex: file => {
                Object.assign(file, {
                    filePath: file.fileId,
                    jobDataId: this.jobStepInfo.jobDataId,
                    jobId: this.jobStepInfo.jobId,
                    jobStepId: this.jobStepInfo.jobStepId,
                    keyId: this.upload.currentPerson.tableId,
                });

                this.workflowService.savePersonAnnex(file).subscribe(result => {
                    this.upload.uploadIfy.list.push({
                        operFiles: result,
                        fileName: result.fileName,
                        url: `${this.commonService.getOpenFileURL(
                            result.filePath,
                            result.fileName
                        )}`,
                        size: result.fileSize,
                        name: result.fileName,
                        type: result.fileType,
                        fileId: result.filePath,
                    });
                    this.upload.uploadIfy.list = [...this.upload.uploadIfy.list];
                });
            },
            /**
             * 查询人员附件
             */
            getPersonFileList: event => {
                const data = {
                    keyId: event.tableId,
                    jobId: this.jobStepInfo.jobId,
                };
                this.workflowService.getPersonFileList(data).subscribe(result => {
                    this.upload.uploadIfy.list = result.map(v => {
                        return {
                            operFiles: v,
                            fileName: v.fileName,
                            url: `${this.commonService.getOpenFileURL(v.filePath, v.fileName)}`,
                            size: v.fileSize,
                            name: v.fileName,
                            type: v.fileType,
                            fileId: v.filePath,
                        };
                    });
                });
            },
            /**
             * 删除附件--数据库删除
             */
            deletePersonFile: data => {
                this.workflowService.deletePersonFile(data.operFiles.id).subscribe();
            },
            list: [],
        },
    };
    constructor(
        private commonService: CommonService,
        private message: NzMessageService,
        private workflowService: WorkflowService,
        private modalService: NzModalService
    ) {}

    ngOnInit() {}
    /**
     * 点击显示
     */
    show(data?) {
        this.getWfData();
        this.standChangeDrawer.open();
    }
    /**
     * 获取数据
     */
    getWfData() {
        const params = {
            jobId: this.jobStepInfo.jobId,
            jobStepId: this.jobStepInfo.jobStepId,
            keyIds: [this.personInf],
            childFields: {
                DATA_1002_PERSON_A01: [],
                DATA_1002_PERSON_GZA01: [],
                DATA_1002_PERSON_GZ14: [],
            },
        };
        this.workflowService.getPsnList('salary_inner_transfer', params).subscribe(result => {
            const [A01] = result.DATA_1002_PERSON_A01;
            const [GZA01] = result.DATA_1002_PERSON_GZA01;
            this.standChangeDrawer.A01AndGZA01 = {
                A01: A01,
                GZA01: GZA01,
            };
            if (result.DATA_1002_PERSON_GZ14) {
                this.standChangeDrawer.data = result.DATA_1002_PERSON_GZ14.map(v => {
                    return {
                        ...v,
                        tableId: v.DATA_1002_PERSON_GZ14_ID,
                    };
                });
            }
        });
    }
}
