import { OnlineDocComponent } from 'app/components/online-doc/online-doc.component';
import { Component, OnInit, AfterViewInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';
import { Router, ActivatedRoute, ParamMap } from '@angular/router';
import { WorkflowService } from 'app/workflow/workflow.service';
import { CommonService } from 'app/util/common.service';
import { OperRouterParams } from 'app/workflow/enums/OperRouterParams';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { JobStepInfo } from 'app/workflow/db/JobStepInfo';
import { JobStepStateEnum } from 'app/workflow/enums/JobStepStateEnum';
import { Base64 } from 'js-base64';
import { OperSelectPersonComponent } from 'app/components/oper-select-person/oper-select-person.component';

import { LoadingService } from 'app/components/loading/loading.service';
import { ClientService } from 'app/master-page/client/client.service';
import { NzMessageService } from 'ng-zorro-antd/message';
import { NzModalService } from 'ng-zorro-antd/modal';
import { ChangeDetectorRef } from '@angular/core';
import { SalaryCivilDefineLevelService } from '../salary-civil-define-level.service';

@Component({
    selector: 'gl-salary-civil-define-level-start',
    templateUrl: './salary-civil-define-level-start.component.html',
    styleUrls: ['./salary-civil-define-level-start.component.scss'],
})
export class SalaryCivilDefineLevelStartComponent implements OnInit {
    /**
     * 路由参数
     */
    URLParams: OperRouterParams;
    /**
     * 用户参数
     */
    userInfo: any;
    /**
     * 业务信息
     */
    jobStepInfo: JobStepInfo;
    /**
     * 业务是否可编辑
     */
    canEdit = false;
    /**
     * 业务信息
     */
    wfInfo: any;

    @ViewChild('startContent', { static: true }) _startContent: ElementRef;
    @ViewChild('editContent', { static: true }) _editContent: ElementRef;
    @ViewChild('preViewTemp', { static: true }) _preViewTemp: ElementRef;
    /**
     * 外层步骤
     */
    operBaseOptionIfy = {
        /**
         * 是否可用
         */
        isUsable: false,
        list: <any>[{ name: '填报业务信息' }, { name: '填报人员信息' }, { name: '预览信息' }],
        current: 0,
        evtStepChange: index => {
            if (!this.operBaseOptionIfy.isUsable) {
                return;
            }
            this.operBaseOptionIfy.current = index;
            switch (index) {
                case 0:
                    this.operBaseOptionIfy.list[index].template = this._startContent;
                    this.operBaseOptionIfy.list[index].form = this.wfBaseParams.form;
                    break;
                case 1:
                    this.operBaseOptionIfy.list[index].template = this._editContent;
                    break;
                case 2:
                    this.operBaseOptionIfy.list[index].template = this._preViewTemp;
                    break;
            }
        },
    };

    @ViewChild('operSelectContactsElement', { static: false })
    operSelectContactsElement: OperSelectPersonComponent;

    @ViewChild('onlineDocOverlayElement', { static: false })
    onlineDocOverlayElement: OnlineDocComponent;
    /**
     * 业务人员基本信息，业务附件相关
     */
    wfBaseParams = {
        evtSelectContacts: () => {
            this.operSelectContactsElement.show();
        },
        evtSelectChange: ({ contacts, contactNumber }) => {
            this.wfBaseParams.form.patchValue({
                contacts,
                contactNumber,
            });
        },
        form: new FormGroup({
            title: new FormControl(this.service.wfName, [Validators.required]),
            contacts: new FormControl(null, [Validators.required]),
            contactNumber: new FormControl(null, [
                Validators.required,
                Validators.pattern(this.workflowService.reg.contactNumberReg),
            ]),
            id: new FormControl(null), // 更新时用的id
        }),
        selectedIndex: 0,
        /**
         * 附件列表
         */
        wfFileList: [],
        /**
         * 上传附件
         */
        fileCustomRequest: item => {
            // 构建一个 FormData 对象，用于存储文件或其他参数
            const formData = new FormData();
            // tslint:disable-next-line:no-any
            formData.append('file', item.file);
            this.commonService.fileUpload(formData).subscribe(result => {
                result.url = result.filePath = `${this.commonService.getOpenFileURL(
                    result.fileId,
                    result.fileName
                )}`;
                const fileObj = Object.assign(item.file, result);
                fileObj.operFiles = result;
                this.wfBaseParams.wfFileList.push(fileObj);
                this.wfBaseParams.wfFileList = [...this.wfBaseParams.wfFileList];
            });
        },
        /**
         * 删除文件
         */
        fileRemove: file => {
            const _index = this.wfBaseParams.wfFileList.findIndex(x => x.fileId === file.fileId);
            this.wfBaseParams.wfFileList.splice(_index, 1);
            this.wfBaseParams.wfFileList = [...this.wfBaseParams.wfFileList];
            return true;
        },
        preview: file => {
            const _index = this.wfBaseParams.wfFileList.findIndex(x => x.fileId === file.fileId);
            this.wfBaseParams.selectedIndex = _index;
            this.onlineDocOverlayElement.show();
            return false;
        },
        loading: false,
        /**
         * 撤销业务
         */
        cancelOper: () => {
            this.modalService.confirm({
                nzTitle: '系统提示?',
                nzContent: `<b style="color: red;">确定要撤销当前业务吗？</b>`,
                nzOkText: '确定',
                nzOkType: 'danger',
                nzOnOk: () => {
                    const data = {
                        jobId: this.jobStepInfo.jobId,
                        jobStepId: this.jobStepInfo.jobStepId,
                    };
                    const _loading = this.loading.show();
                    this.workflowService.undo(this.service.wfId, data).subscribe(result => {
                        if (result) {
                            _loading.close();
                            this.router.navigateByUrl(this.URLParams.redirect);
                        }
                    });
                },
                nzCancelText: '取消',
                nzOnCancel: () => console.log('Cancel'),
            });
        },
    };

    /**
     * 选择审批单位抽屉
     */
    setAuditUnitIfy = {
        visible: false,
        title: '审批单位',
        width: 400,
        close: () => (this.setAuditUnitIfy.visible = false),
        open: () => {
            this.setAuditUnitIfy._loadAuditUnitList();
            this.setAuditUnitIfy.visible = true;
        },

        find: {
            searchWidth: 380,
            placeholder: '输入关键字查询',
            nzFilterOption: () => true,

            searchKey: null,
            list: [],

            evtModelChange: () => { },
            evtSearch: event => {
                if (event) {
                }
            },
            evtFocus: () => {
                this.setAuditUnitIfy.find.searchKey = null;
            },
        },

        list: <any[]>[],
        _loadAuditUnitList: () => {
            if (!this.wfInfo || !this.wfInfo.reportingGroup) {
                this.message.warning('未设置业务上报机构分组。');
                return;
            }
            const data = {
                ORG_GROUP_ID: this.wfInfo.reportingGroup,
                ORG_B01_ID: this.userInfo.unitId,
            };
            this.workflowService.selectListForReporting(data).subscribe(result => {
                this.setAuditUnitIfy.list = result;
            });
        },

        selectIndex: -1,
        evtSelectUnit: index => {
            this.setAuditUnitIfy.selectIndex = index;
        },

        subLoading: false,
        /**
         * 上报业务
         */
        evtSubmit: () => {
            const { ORG_B01_ID, ORG_NAME } = this.setAuditUnitIfy.list[
                this.setAuditUnitIfy.selectIndex
            ];
            const data = {
                jobId: this.URLParams.jobId,
                jobStepId: this.URLParams.jobStepId,
                targetUnitIds: [{ unitId: ORG_B01_ID, unitName: ORG_NAME }],
            };
            const _loading = this.loading.show();
            this.workflowService.submit(this.service.wfId, data).subscribe(result => {
                _loading.close();
                if (result) {
                    this.router.navigateByUrl(this.URLParams.redirect);
                }
            });
        },
    };

    /**
     * 第三步 预览信息
     */
    formListIfy = {
        isChange: null,
        selectedId: 0,
    };

    constructor(
        private clientService: ClientService,
        private service: SalaryCivilDefineLevelService,
        private router: Router,
        private workflowService: WorkflowService,
        private activatedRoute: ActivatedRoute,
        private commonService: CommonService,
        private message: NzMessageService,
        private modalService: NzModalService,

        private loading: LoadingService,
        private cdr: ChangeDetectorRef
    ) { }

    ngOnInit() {
        this.userInfo = this.commonService.getUserLoginInfo();
    }

    ngAfterViewInit() {
        this.operBaseOptionIfy.list[0].template = this._startContent;
        this.operBaseOptionIfy.list[0].form = this.wfBaseParams.form;
        this.loadRouteParams();
    }

    ngOnDestroy() {
        this.clientService.clearBreadCrumb();
    }

    private loadRouteParams() {
        // 获取路由参数
        this.activatedRoute.queryParamMap.subscribe(async (params: ParamMap) => {
            // 判断路由参数是否存在
            if (params.has('GL')) {
                this.URLParams = JSON.parse(Base64.decode(params.get('GL')));
                // 业务是否可编辑
                this.canEdit = this.URLParams.jobStepState === JobStepStateEnum.PROCESSING;

                this.loadJobMain();

                this.loadUserContacts();
                // 业务存在
                if (this.URLParams.jobId) {
                    this.loadStepStandardInfo();
                }
                this.cdr.detectChanges();
            }
        });
    }

    /**
     * 加载业务信息
     */
    loadJobMain() {
        this.workflowService.getWfMainData(this.service.wfId).subscribe(result => {
            this.wfInfo = result;
            if (!this.URLParams.jobId) {
                this.wfBaseParams.form.patchValue({ title: result.wfName });
            }

            this.clientService.buildBreadCrumb([
                {
                    type: 'home',
                },
                {
                    type: 'event',
                    icon: 'share-alt',
                    text: `业务工作台`,
                    event: () => {
                        this.router.navigateByUrl(this.URLParams.redirect);
                    },
                },
                {
                    type: 'text',
                    text: `${result.wfName}-发起业务`,
                },
            ]);
        });
    }

    //#region 业务操作相关
    /**
     * 业务发起
     */
    evtSubmitStart(isEdit = false) {
        if (!this.workflowService.formVerify(this.wfBaseParams.form)) {
            return;
        }
        const formData = this.wfBaseParams.form.getRawValue();
        const attachments = this.wfBaseParams.wfFileList.map(item => item.operFiles);
        const params: any = {
            wfId: this.service.wfId,
            wfParamMain: formData,
            attachments: attachments,
        };
        this.wfBaseParams.loading = true;
        if (isEdit) {
            // 业务存在，更新业务数据
            params.jobId = this.URLParams.jobId;
            params.jobStepId = this.URLParams.jobStepId;
            this.workflowService.updateStepStandardInfo(params).subscribe(() => {
                this.operBaseOptionIfy.isUsable = true;
                this.wfBaseParams.loading = false;
                this.operBaseOptionIfy.evtStepChange(1);
            });
            return;
        }

        // 代管单位处理
        if (this.URLParams.agentOrgId && this.URLParams.agentOrgId !== '-1') {
            params.agentOrgId = this.URLParams.agentOrgId;
            params.agentOrgName = this.URLParams.agentOrgName;
        }
        this.workflowService.start(params).subscribe(result => {
            this.wfBaseParams.loading = false;
            this.operBaseOptionIfy.isUsable = true;
            // this.jobStepInfo = result;

            // 构建路由参数，以免刷新后丢失刚发起的业务
            const routerParams = {
                jobId: result.jobId,
                jobStepId: result.jobStepId,
                stepId: result.stepId,
                jobStepState: JobStepStateEnum.PROCESSING,
                redirect: this.URLParams.redirect,
            };
            this.URLParams = Object.assign(this.URLParams, routerParams);
            const GL = Base64.encode(JSON.stringify(routerParams));
            this.router.navigate([], {
                relativeTo: this.activatedRoute,
                queryParams: { GL },
                queryParamsHandling: 'merge',
            });
            this.operBaseOptionIfy.evtStepChange(1);
        });
    }

    /**
     * 加载业务信息
     */
    private loadStepStandardInfo() {
        this.workflowService.getStepStandardInfo(this.URLParams).subscribe(result => {
            this.jobStepInfo = result;
            // 发起的新业务不需要设置业务基本信息，只有存在的业务才设置业务基本信息
            if (this.URLParams.jobId) {
                // 设置业务基本信息
                this.wfBaseParams.form.reset(this.jobStepInfo.wfParamMain);
                this.loadUserContacts();
                if (this.jobStepInfo.wfParamMain.contacts) {
                    this.operBaseOptionIfy.isUsable = true;
                }
                if (this.jobStepInfo.attachments) {
                    // 设置业务附件
                    this.wfBaseParams.wfFileList = this.jobStepInfo.attachments.map(item => {
                        return {
                            ...item,
                            operFiles: item,
                            name: item.fileName,
                            url: `${this.commonService.getDownFileURL(item.fileId, item.fileName)}`,
                        };
                    });
                }
            }
        });
    }
    /**
     * 加载用户信息
     */
    private async loadUserContacts() {
        const { contacts, contactNumber } = this.wfBaseParams.form.getRawValue();
        const userInfo: any = await this.commonService.getUserInfoByCache();
        if (!contacts) {
            this.wfBaseParams.form.patchValue({ contacts: userInfo.SYSTEM_USER_NAME });
        }
        if (!contactNumber) {
            this.wfBaseParams.form.patchValue({ contactNumber: userInfo.SYSTEM_USER_PHONE });
        }
    }
    //#endregion
}
